{"file_contents":{"replit.md":{"content":"# PurpleMusic - Music Streaming App\n\n## Overview\n\nA dark-themed mobile music streaming app built with React featuring PurpleMusic branding. Features black background, transparent white header with custom logo and profile dropdown, bottom navigation with Home, Search, Liked Songs, and My Playlists sections, complete music player functionality with mini-player and full-screen player, and homepage with horizontal scroll sections for Recently Played, Made for You, and Trending Now content.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18.2.0 with React Router for navigation\n- **Navigation**: React Router DOM with stack-based routing pattern\n- **UI Components**: Custom component architecture with Header and BottomNavigation components\n- **Styling**: CSS-based styling with dark theme and Spotify-like design patterns\n\n### Screen Structure\n- **HomeScreen**: Main interface with search bar and horizontal scroll sections\n- **SearchScreen**: Search interface with recent and trending searches\n- **LikedSongsScreen**: Playlist-style interface for liked songs\n- **PlaylistsScreen**: User's playlists management interface\n- **Navigation Flow**: React Router managing transitions between all screens\n\n### Component Architecture\n- **Header Component**: Transparent white header with logo and profile icon\n- **BottomNavigation Component**: Fixed bottom navigation with 4 main sections\n- **Modular Design**: Clear separation between screens and components for maintainability\n- **State Management**: Local component state using React hooks (useState)\n\n### Design System\n- **Theme**: Dark mode design with black background (#000000)\n- **Color Palette**: Spotify green (#1DB954), gradients for visual interest\n- **Typography**: Modern typography with proper text hierarchy and contrast\n- **Layout**: Mobile-first responsive design with sticky header and bottom navigation\n\n### Data Management\n- **Mock Data**: Currently uses hardcoded data for playlists, songs, and content\n- **Data Structure**: Objects contain id, title, artist, covers (emoji-based), and metadata\n- **Backend Integration**: Express server provides Pi Network payment APIs and user authentication\n\n## Backend Architecture\n### Express Server\n- **Framework**: Express.js with CORS and body-parser middleware\n- **Port**: Runs on port 8080 (configurable via PORT environment variable)\n- **APIs**: Pi Network payment verification endpoints and user authentication\n- **Database**: Supabase integration for user management and premium status\n\n### Payment Integration\n- **Pi Network**: Complete payment flow with approve/complete pattern\n- **Endpoints**: `/api/verify-payment`, `/api/payments/approve`, `/api/payments/complete`\n- **Authentication**: Requires PI_API_KEY and SUPABASE_SERVICE_KEY environment variables\n\n## Replit Environment Setup\n### Development Configuration\n- **Frontend**: React dev server on port 5000 with host verification disabled for Replit proxy\n- **Backend**: Express server on port 8080 with local development support\n- **Proxy**: Configured to work with Replit's iframe-based preview system\n- **Host Settings**: `DANGEROUSLY_DISABLE_HOST_CHECK=true` and `HOST=0.0.0.0` for React\n\n### Deployment Configuration\n- **Target**: Autoscale deployment for stateless web application\n- **Build**: `npm run build` for React production build\n- **Runtime**: `npm start` runs backend server for production\n\n## External Dependencies\n\n### Core React Stack\n- **react**: 18.2.0 - React library for component architecture\n- **react-dom**: 18.2.0 - React DOM for web platform\n- **react-scripts**: Latest - Create React App build tools\n\n### Navigation Libraries\n- **react-router-dom**: Latest - Client-side routing for React web applications\n\n### Development Tools\n- **@types/react**: Type definitions for React components\n- **@types/react-dom**: Type definitions for React DOM\n- **css-select**: CSS selector library\n- **nth-check**: CSS nth-child selector parsing\n- **serve**: Static file serving for production builds\n- **svgo**: SVG optimization tools\n\n## Recent Changes\n\n### September 28, 2025\n- **Replit Setup**: Configured for Replit development environment\n- **Dependencies**: Installed all frontend (React) and backend (Express) dependencies\n- **Host Configuration**: Set up React dev server to work with Replit proxy\n- **Workflow**: Configured frontend workflow on port 5000\n- **Backend**: Set up Express server on port 8080 (separate from frontend)\n- **Deployment**: Configured autoscale deployment with proper build/run commands\n\n### September 25, 2025\n- Complete redesign from React Native to React web application\n- Implemented Spotify-like dark theme interface with black background\n- Added transparent white header with logo and profile icon\n- Created bottom navigation with Home, Search, Liked Songs, and Playlists sections\n- Built homepage with search bar and horizontal scroll sections (Recently Played, Made for You, Trending Now)\n- Developed dedicated pages for Search, Liked Songs, and Playlists functionality\n- Applied mobile-first responsive design patterns\n\nNote: The application is a design-only interface using mock data. No actual audio playback functionality is implemented. Future iterations may require audio libraries, state management solutions, and backend integration for real music streaming capabilities.","size_bytes":5408},"src/App.js":{"content":"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// ...existing code...\nimport HomeScreen from './screens/HomeScreen';\nimport SearchScreen from './screens/SearchScreen';\nimport LikedSongsScreen from './screens/LikedSongsScreen';\nimport PlaylistsScreen from './screens/PlaylistsScreen';\nimport ViewProfileScreen from './screens/ViewProfileScreen';\nimport Header from './components/Header';\nimport BottomNavigation from './components/BottomNavigation';\nimport ModernAudioPlayer from './components/ModernAudioPlayer';\nimport { setUserId } from './services/likeService';\n// ...existing code...\nimport './index.css';\n\nfunction App() {\n  // Set demo user on app start for testing like functionality\n  useEffect(() => {\n    if (!localStorage.getItem('user_id')) {\n      setUserId('demo_user_' + Math.random().toString(36).substr(2, 9));\n    }\n  }, []);\n  return (\n    <div className=\"app\">\n      <Router>\n        <Header />\n        <main className=\"main-content\">\n          <Routes>\n            <Route path=\"/\" element={<HomeScreen />} />\n            <Route path=\"/search\" element={<SearchScreen />} />\n            <Route path=\"/liked\" element={<LikedSongsScreen />} />\n            <Route path=\"/playlists\" element={<PlaylistsScreen />} />\n            <Route path=\"/profile\" element={<ViewProfileScreen />} />\n          </Routes>\n        </main>\n  <BottomNavigation />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","size_bytes":1484},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background-color: #000000;\n  color: #FFFFFF;\n  height: 100vh;\n  overflow-x: hidden;\n  /* Hide scrollbar */\n  -ms-overflow-style: none;  /* Internet Explorer 10+ */\n  scrollbar-width: none;  /* Firefox */\n}\n\nbody::-webkit-scrollbar {\n  display: none;  /* Safari and Chrome */\n}\n\n#root {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n/* App Container */\n.app {\n  height: 100vh;\n  background-color: #000000;\n  display: flex;\n  flex-direction: column;\n}\n\n.main-content {\n  flex: 1;\n  overflow-y: auto;\n  padding-bottom: 165px; /* Space for bottom nav + mini player */\n}\n\n/* Header */\n.header {\n  background: rgba(255, 255, 255, 0.08);\n  backdrop-filter: blur(10px);\n  padding: 10px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  position: sticky;\n  top: 0;\n  z-index: 100;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.header-logo {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.logo-image {\n  width: 42px;\n  height: 42px;\n  border-radius: 50%;\n  object-fit: cover;\n  object-position: center;\n  background: transparent;\n}\n\n.logo-text {\n  font-size: 20px;\n  font-weight: bold;\n  background: linear-gradient(135deg, #8B5CF6, #F59E0B);\n  -webkit-background-clip: text;\n  background-clip: text;\n  -webkit-text-fill-color: transparent;\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.header-profile {\n  width: 32px;\n  height: 32px;\n}\n\n.profile-icon {\n  width: 32px;\n  height: 32px;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.profile-icon:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n/* Profile Dropdown */\n.profile-dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.profile-dropdown-menu {\n  position: absolute;\n  top: calc(100% + 8px);\n  right: 0;\n  width: 250px;\n  background: rgba(40, 40, 40, 0.95);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  border-radius: 12px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  z-index: 1000;\n  overflow: hidden;\n}\n\n.dropdown-arrow {\n  position: absolute;\n  top: -6px;\n  right: 16px;\n  width: 12px;\n  height: 12px;\n  background: rgba(40, 40, 40, 0.95);\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n  transform: rotate(45deg);\n}\n\n.dropdown-content {\n  padding: 8px;\n}\n\n.dropdown-button {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 12px;\n  background: transparent;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: left;\n}\n\n.dropdown-button:hover {\n  background: rgba(255, 255, 255, 0.1);\n  transform: translateY(-1px);\n}\n\n.button-icon {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 12px;\n  font-weight: bold;\n  font-size: 14px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n  transition: box-shadow 0.2s ease;\n}\n\n.dropdown-button:hover .button-icon {\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n}\n\n.pi-icon {\n  background: linear-gradient(135deg, #ffd700, #ffa500);\n  color: #000;\n}\n\n.premium-icon {\n  background: linear-gradient(135deg, #1db954, #0f8442);\n  color: #fff;\n}\n\n.button-text {\n  flex: 1;\n}\n\n.button-title {\n  color: #fff;\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 2px;\n}\n\n.button-subtitle {\n  color: rgba(255, 255, 255, 0.6);\n  font-size: 12px;\n}\n\n.dropdown-divider {\n  height: 1px;\n  background: rgba(255, 255, 255, 0.1);\n  margin: 4px 12px;\n}\n\n/* Modern Audio Player Custom Styles */\n.slider::-webkit-slider-thumb {\n  appearance: none;\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #8B5CF6, #F59E0B);\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n}\n\n.slider::-moz-range-thumb {\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: linear-gradient(135deg, #8B5CF6, #F59E0B);\n  cursor: pointer;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n  border: none;\n}\n\n\n/* Bottom Navigation */\n.bottom-navigation {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: rgba(0, 0, 0, 0.95);\n  backdrop-filter: blur(10px);\n  display: flex;\n  justify-content: space-around;\n  padding: 8px 0 20px 0;\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\n  z-index: 100;\n}\n\n.nav-item {\n  background: none;\n  border: none;\n  color: #B3B3B3;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 16px;\n  transition: color 0.3s ease;\n}\n\n.nav-item.active {\n  color: #FFFFFF;\n}\n\n.nav-item:hover {\n  color: #FFFFFF;\n}\n\n.nav-icon {\n  font-size: 24px;\n}\n\n.nav-label {\n  font-size: 10px;\n  font-weight: 600;\n}\n\n/* Home Screen */\n.home-screen {\n  padding: 0 20px 20px 20px;\n}\n\n/* Songs Grid */\n.songs-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n  gap: 18px 14px;\n}\n\n@media (min-width: 380px) {\n  .songs-grid { grid-template-columns: repeat(auto-fill, minmax(110px, 1fr)); }\n}\n@media (min-width: 480px) {\n  .songs-grid { grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); }\n}\n@media (min-width: 640px) {\n  .songs-grid { grid-template-columns: repeat(auto-fill, minmax(130px, 1fr)); }\n}\n@media (min-width: 820px) {\n  .songs-grid { grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); }\n}\n\n/* Horizontal slider styles */\n.songs-slider {\n  display: flex;\n  gap: 16px;\n  overflow-x: auto;\n  overflow-y: hidden;\n  padding-bottom: 8px;\n  margin-bottom: 20px;\n  /* Hide scrollbar on mobile, show thin scrollbar on desktop */\n  scrollbar-width: thin;\n  scrollbar-color: rgba(255, 255, 255, 0.3) transparent;\n}\n\n.songs-slider::-webkit-scrollbar {\n  height: 6px;\n}\n\n.songs-slider::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.songs-slider::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 3px;\n}\n\n.songs-slider::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.5);\n}\n\n.song-card-slider {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  cursor: pointer;\n  user-select: none;\n  -webkit-user-drag: none;\n  transition: transform 0.18s ease, filter 0.18s ease;\n  flex-shrink: 0;\n  width: calc((100vw - 80px) / 5 - 16px);\n  min-width: 60px;\n  max-width: 110px;\n}\n\n.song-card-slider:active { \n  transform: scale(.94); \n}\n\n.song-card-slider:hover { \n  filter: brightness(1.15); \n}\n\n.song-card-cover-slider {\n  width: 100%;\n  aspect-ratio: 1 / 1;\n  border-radius: 12px;\n  overflow: hidden;\n  background: #111;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 16px -4px rgba(0,0,0,0.6);\n  position: relative;\n}\n\n.song-card-cover-slider img {\n  width: 100%; \n  height: 100%; \n  object-fit: cover; \n  display: block;\n  aspect-ratio: 1 / 1;\n}\n\n.song-card-title-slider {\n  font-size: 12px;\n  font-weight: 600;\n  color: #FFFFFF;\n  margin-top: 8px;\n  line-height: 1.2;\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.song-card {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  cursor: pointer;\n  user-select: none;\n  -webkit-user-drag: none;\n  transition: transform 0.18s ease, filter 0.18s ease;\n}\n.song-card:active { transform: scale(.94); }\n.song-card:hover { filter: brightness(1.15); }\n\n.song-card-cover {\n  width: 120px;\n  height: 120px;\n  border-radius: 18px;\n  overflow: hidden;\n  background: #111;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 16px -4px rgba(0,0,0,0.6);\n  position: relative;\n}\n.song-card-cover img { width:100%; height:100%; object-fit:cover; display:block; }\n\n@media (max-width: 379px) {\n  .song-card-cover { width:100px; height:100px; }\n}\n@media (min-width:480px) {\n  .song-card-cover { width:120px; height:120px; }\n}\n@media (min-width:820px) {\n  .song-card-cover { width:140px; height:140px; }\n}\n\n.song-card-title {\n  margin-top: 8px;\n  font-size: 13px;\n  font-weight: 600;\n  color: #FFFFFF;\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.song-card-artist {\n  font-size: 11px;\n  color: #B3B3B3;\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* Remove old horizontal section items look for new grid context */\n.made-item, .recent-item, .trending-item, .made-cover, .recent-cover, .trending-cover { background:none !important; }\n\n.search-bar-container {\n  padding: 20px 0;\n}\n\n.search-bar {\n  position: relative;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 25px;\n  padding: 12px 20px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.search-bar .search-icon {\n  font-size: 18px;\n  color: #B3B3B3;\n}\n\n.search-bar .search-input {\n  background: none;\n  border: none;\n  outline: none;\n  color: #FFFFFF;\n  font-size: 16px;\n  flex: 1;\n}\n\n.search-bar .search-input::placeholder {\n  color: #B3B3B3;\n}\n\n.home-section {\n  margin-bottom: 30px;\n}\n\n.section-title {\n  font-size: 22px;\n  font-weight: bold;\n  color: #FFFFFF;\n  margin-bottom: 16px;\n}\n\n.horizontal-scroll {\n  display: flex;\n  gap: 16px;\n  overflow-x: auto;\n  padding-bottom: 4px;\n  scroll-behavior: smooth;\n  -webkit-overflow-scrolling: touch;\n}\n\n.horizontal-scroll::-webkit-scrollbar {\n  display: none;\n}\n\n/* Recently Played Items */\n.recent-item {\n  min-width: 140px;\n  cursor: pointer;\n}\n\n.recent-cover {\n  width: 140px;\n  height: 140px;\n  background: linear-gradient(45deg, #1DB954, #1ED760);\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 48px;\n  margin-bottom: 8px;\n  transition: transform 0.2s ease;\n}\n\n.recent-item:hover .recent-cover {\n  transform: scale(1.05);\n}\n\n.recent-title {\n  font-size: 14px;\n  font-weight: 600;\n  color: #FFFFFF;\n  text-align: center;\n}\n\n/* Made for You Items */\n.made-item {\n  min-width: 160px;\n  cursor: pointer;\n}\n\n.made-cover {\n  width: 160px;\n  height: 160px;\n  background: linear-gradient(45deg, #8E2DE2, #4A00E0);\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 56px;\n  margin-bottom: 8px;\n  transition: transform 0.2s ease;\n}\n\n.made-item:hover .made-cover {\n  transform: scale(1.05);\n}\n\n.made-title {\n  font-size: 14px;\n  font-weight: 600;\n  color: #FFFFFF;\n  margin-bottom: 4px;\n}\n\n.made-subtitle {\n  font-size: 12px;\n  color: #B3B3B3;\n  line-height: 1.3;\n}\n\n/* Trending Items */\n.trending-item {\n  min-width: 160px;\n  cursor: pointer;\n}\n\n.trending-cover {\n  width: 160px;\n  height: 160px;\n  background: linear-gradient(45deg, #FF6B6B, #FF8E53);\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 56px;\n  margin-bottom: 8px;\n  transition: transform 0.2s ease;\n}\n\n.trending-item:hover .trending-cover {\n  transform: scale(1.05);\n}\n\n.trending-title {\n  font-size: 14px;\n  font-weight: 600;\n  color: #FFFFFF;\n  margin-bottom: 4px;\n}\n\n.trending-subtitle {\n  font-size: 12px;\n  color: #B3B3B3;\n  line-height: 1.3;\n}\n\n/* Search Screen */\n.search-screen {\n  padding: 20px;\n}\n\n.search-input-container {\n  position: relative;\n  margin-bottom: 30px;\n}\n\n.search-input {\n  width: 100%;\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  border-radius: 25px;\n  padding: 15px 50px 15px 20px;\n  font-size: 16px;\n  color: #FFFFFF;\n  outline: none;\n}\n\n.search-input::placeholder {\n  color: #B3B3B3;\n}\n\n.search-input-container .search-icon {\n  position: absolute;\n  right: 20px;\n  top: 50%;\n  transform: translateY(-50%);\n  font-size: 18px;\n  color: #B3B3B3;\n}\n\n.search-section {\n  margin-bottom: 40px;\n}\n\n.search-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.search-item {\n  display: flex;\n  align-items: center;\n  padding: 12px 16px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.search-item:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.search-text {\n  flex: 1;\n  color: #FFFFFF;\n  font-size: 16px;\n}\n\n.search-close {\n  color: #B3B3B3;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.trending-icon {\n  margin-right: 12px;\n  font-size: 18px;\n}\n\n.search-results {\n  text-align: center;\n  margin-top: 40px;\n}\n\n.search-results-text {\n  color: #B3B3B3;\n  margin-bottom: 40px;\n  font-size: 16px;\n}\n\n.no-results {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  color: #B3B3B3;\n}\n\n.no-results-icon {\n  font-size: 64px;\n  opacity: 0.5;\n}\n\n/* Liked Songs Screen */\n.liked-songs-screen {\n  padding: 20px;\n}\n\n.liked-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 30px;\n  gap: 20px;\n}\n\n.liked-cover {\n  width: 200px;\n  height: 200px;\n  background: linear-gradient(135deg, #1DB954, #1ED760);\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.liked-icon {\n  font-size: 80px;\n}\n\n.liked-info {\n  flex: 1;\n}\n\n.liked-type {\n  font-size: 12px;\n  color: #B3B3B3;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  margin-bottom: 8px;\n}\n\n.liked-title {\n  font-size: 48px;\n  font-weight: bold;\n  color: #FFFFFF;\n  margin-bottom: 16px;\n}\n\n.liked-count {\n  font-size: 16px;\n  color: #B3B3B3;\n}\n\n.liked-controls {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.play-all-btn {\n  background: #1DB954;\n  border: none;\n  border-radius: 50px;\n  padding: 16px 32px;\n  color: #000000;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: transform 0.2s ease;\n}\n\n.play-all-btn:hover {\n  transform: scale(1.05);\n}\n\n.shuffle-btn {\n  background: none;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  width: 48px;\n  height: 48px;\n  color: #FFFFFF;\n  font-size: 20px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: border-color 0.2s ease;\n}\n\n.shuffle-btn:hover {\n  border-color: rgba(255, 255, 255, 0.6);\n}\n\n.songs-list {\n  display: flex;\n  flex-direction: column;\n}\n\n.song-item {\n  display: flex;\n  align-items: center;\n  padding: 8px 0;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.song-item:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.song-number {\n  width: 40px;\n  text-align: center;\n  color: #B3B3B3;\n  font-size: 16px;\n}\n\n.song-cover {\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  background: linear-gradient(45deg, #1DB954, #1ED760);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 12px;\n  font-size: 18px;\n}\n\n.song-details {\n  flex: 1;\n}\n\n.song-title {\n  font-size: 16px;\n  font-weight: 400;\n  color: #FFFFFF;\n  margin-bottom: 4px;\n}\n\n.song-artist {\n  font-size: 14px;\n  color: #B3B3B3;\n}\n\n.song-duration {\n  color: #B3B3B3;\n  font-size: 14px;\n  margin-right: 16px;\n}\n\n.song-menu {\n  background: none;\n  border: none;\n  color: #B3B3B3;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 50%;\n  transition: background-color 0.2s ease;\n}\n\n.song-menu:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* Playlists Screen */\n.playlists-screen {\n  padding: 20px;\n}\n\n.playlists-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n}\n\n.screen-title {\n  font-size: 32px;\n  font-weight: bold;\n  color: #FFFFFF;\n}\n\n.create-playlist-btn {\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  border-radius: 25px;\n  padding: 12px 20px;\n  color: #FFFFFF;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  transition: background-color 0.2s ease;\n}\n\n.create-playlist-btn:hover {\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.quick-access {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 30px;\n}\n\n.quick-item {\n  display: flex;\n  align-items: center;\n  padding: 12px 16px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.quick-item:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.quick-icon {\n  font-size: 24px;\n  margin-right: 16px;\n}\n\n.quick-text {\n  font-size: 16px;\n  font-weight: 600;\n  color: #FFFFFF;\n}\n\n.playlists-list {\n  display: flex;\n  flex-direction: column;\n}\n\n.playlist-item {\n  display: flex;\n  align-items: center;\n  padding: 12px 0;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.2s ease;\n}\n\n.playlist-item:hover {\n  background: rgba(255, 255, 255, 0.05);\n}\n\n.playlist-cover {\n  width: 56px;\n  height: 56px;\n  background: linear-gradient(45deg, #8E2DE2, #4A00E0);\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 16px;\n  font-size: 28px;\n}\n\n.playlist-details {\n  flex: 1;\n}\n\n.playlist-name {\n  font-size: 16px;\n  font-weight: 400;\n  color: #FFFFFF;\n  margin-bottom: 4px;\n}\n\n.playlist-info {\n  font-size: 14px;\n  color: #B3B3B3;\n}\n\n.playlist-menu {\n  background: none;\n  border: none;\n  color: #B3B3B3;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 50%;\n  transition: background-color 0.2s ease;\n}\n\n.playlist-menu:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* Full Screen Player */\n.fullscreen-player {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(180deg, #2A2A2A 0%, #000000 100%);\n  z-index: 200;\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n}\n\n.player-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 40px;\n}\n\n.player-back-btn,\n.player-menu-btn {\n  background: none;\n  border: none;\n  color: #FFFFFF;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 8px;\n  border-radius: 50%;\n  transition: background-color 0.2s ease;\n}\n\n.player-back-btn:hover,\n.player-menu-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.player-header-info {\n  text-align: center;\n  flex: 1;\n}\n\n.player-header-title {\n  font-size: 14px;\n  font-weight: 600;\n  color: #FFFFFF;\n  margin-bottom: 4px;\n}\n\n.player-header-subtitle {\n  font-size: 12px;\n  color: #B3B3B3;\n}\n\n.player-artwork {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 40px;\n}\n\n.player-cover {\n  width: 320px;\n  height: 320px;\n  background: linear-gradient(135deg, #1DB954, #1ED760);\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 120px;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);\n}\n\n.player-info {\n  text-align: center;\n  margin-bottom: 40px;\n}\n\n.player-song-title {\n  font-size: 24px;\n  font-weight: bold;\n  color: #FFFFFF;\n  margin-bottom: 8px;\n}\n\n.player-song-artist {\n  font-size: 16px;\n  color: #B3B3B3;\n}\n\n.player-progress {\n  margin-bottom: 40px;\n}\n\n.progress-bar {\n  height: 4px;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 2px;\n  position: relative;\n  cursor: pointer;\n  margin-bottom: 12px;\n}\n\n.progress-fill {\n  height: 100%;\n  background: #FFFFFF;\n  border-radius: 2px;\n  transition: width 0.1s ease;\n}\n\n.progress-thumb {\n  position: absolute;\n  top: -6px;\n  width: 16px;\n  height: 16px;\n  background: #FFFFFF;\n  border-radius: 50%;\n  margin-left: -8px;\n  cursor: pointer;\n}\n\n.progress-time {\n  display: flex;\n  justify-content: space-between;\n  font-size: 12px;\n  color: #B3B3B3;\n}\n\n.player-controls {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 40px;\n  max-width: 280px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.control-btn {\n  background: none;\n  border: none;\n  color: #B3B3B3;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 12px;\n  border-radius: 50%;\n  transition: all 0.2s ease;\n}\n\n.control-btn:hover,\n.control-btn.active {\n  color: #FFFFFF;\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.play-btn {\n  background: #FFFFFF;\n  color: #000000;\n  width: 72px;\n  height: 72px;\n  border-radius: 50%;\n  font-size: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.2s ease;\n}\n\n.play-btn:hover {\n  transform: scale(1.05);\n}\n\n.player-bottom {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.bottom-btn {\n  background: none;\n  border: none;\n  color: #B3B3B3;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 12px;\n  border-radius: 50%;\n  transition: all 0.2s ease;\n}\n\n.bottom-btn:hover {\n  color: #FFFFFF;\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.volume-control {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.volume-slider {\n  width: 80px;\n  height: 4px;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 2px;\n  position: relative;\n  cursor: pointer;\n  margin-left: 12px;\n}\n\n.volume-fill {\n  height: 100%;\n  background: #FFFFFF;\n  border-radius: 2px;\n  transition: width 0.1s ease;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .liked-header {\n    flex-direction: column;\n    text-align: center;\n  }\n  \n  .liked-cover {\n    width: 160px;\n    height: 160px;\n  }\n  \n  .liked-title {\n    font-size: 32px;\n  }\n  \n  .screen-title {\n    font-size: 24px;\n  }\n  \n  .horizontal-scroll {\n    padding-left: 20px;\n    margin-left: -20px;\n    padding-right: 20px;\n    margin-right: -20px;\n  }\n\n  .player-cover {\n    width: 280px;\n    height: 280px;\n    font-size: 100px;\n  }\n\n  .fullscreen-player {\n    padding: 16px;\n  }\n\n  .player-controls {\n    max-width: 240px;\n  }\n}\n\n/* ===== Premium Popup ===== */\n.premium-popup-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.8);\n  z-index: 1000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n}\n\n.premium-popup {\n  background: #1a1a1a;\n  border-radius: 16px;\n  max-width: 400px;\n  width: 100%;\n  max-height: 90vh;\n  overflow-y: auto;\n  border: 1px solid #333;\n}\n\n.premium-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 20px 0 20px;\n}\n\n.premium-header h2 {\n  color: #fff;\n  margin: 0;\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.close-btn {\n  background: none;\n  border: none;\n  color: #999;\n  font-size: 24px;\n  cursor: pointer;\n  padding: 0;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: all 0.2s;\n}\n\n.close-btn:hover {\n  background: #333;\n  color: #fff;\n}\n\n.premium-content {\n  padding: 20px;\n  text-align: center;\n}\n\n.premium-icon {\n  font-size: 48px;\n  margin-bottom: 16px;\n}\n\n.premium-content h3 {\n  color: #fff;\n  margin: 0 0 12px 0;\n  font-size: 22px;\n  font-weight: 600;\n}\n\n.premium-content p {\n  color: #ccc;\n  margin: 0 0 24px 0;\n  line-height: 1.5;\n}\n\n.premium-price {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 24px 0;\n  padding: 20px;\n  background: linear-gradient(135deg, #1DB954, #1ed760);\n  border-radius: 12px;\n}\n\n.price {\n  color: #fff;\n  font-size: 28px;\n  font-weight: 700;\n  margin-bottom: 4px;\n}\n\n.period {\n  color: #fff;\n  font-size: 14px;\n  opacity: 0.9;\n}\n\n.premium-features {\n  text-align: left;\n  margin: 24px 0;\n}\n\n.feature {\n  color: #1DB954;\n  margin: 8px 0;\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n}\n\n.feature::before {\n  content: '✓';\n  margin-right: 12px;\n  font-weight: bold;\n}\n\n.premium-buttons {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-top: 24px;\n}\n\n.upgrade-btn {\n  background: linear-gradient(135deg, #1DB954, #1ed760);\n  color: #fff;\n  border: none;\n  padding: 14px 24px;\n  border-radius: 25px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.upgrade-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(29, 185, 84, 0.3);\n}\n\n.cancel-btn {\n  background: transparent;\n  color: #999;\n  border: 1px solid #333;\n  padding: 12px 24px;\n  border-radius: 25px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.cancel-btn:hover {\n  background: #333;\n  color: #fff;\n}\n\n/* ===== View Profile Screen ===== */\n.view-profile-screen {\n  padding: 20px;\n  max-width: 800px;\n  margin: 0 auto;\n  color: #fff;\n}\n\n.profile-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n}\n\n.edit-profile-btn {\n  background: linear-gradient(135deg, #1DB954, #1ed760);\n  color: #fff;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.edit-profile-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px rgba(29, 185, 84, 0.3);\n}\n\n.profile-content {\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n}\n\n/* Profile Picture Section */\n.profile-picture-section {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n}\n\n.profile-picture-container {\n  position: relative;\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  overflow: hidden;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.profile-picture-container:hover {\n  transform: scale(1.05);\n}\n\n.profile-picture {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.profile-picture-placeholder {\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(135deg, #333, #555);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #999;\n}\n\n.profile-icon-large {\n  font-size: 60px;\n}\n\n.profile-picture-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.profile-picture-container:hover .profile-picture-overlay {\n  opacity: 1;\n}\n\n.camera-icon {\n  font-size: 30px;\n  margin-bottom: 5px;\n}\n\n.upload-text {\n  font-size: 12px;\n  color: #fff;\n  text-align: center;\n}\n\n/* Profile Information */\n.profile-info-section {\n  background: #1a1a1a;\n  border-radius: 16px;\n  padding: 24px;\n  border: 1px solid #333;\n}\n\n.profile-field {\n  margin-bottom: 20px;\n}\n\n.field-label {\n  display: block;\n  color: #999;\n  font-size: 14px;\n  margin-bottom: 8px;\n  font-weight: 500;\n}\n\n.field-value {\n  color: #fff;\n  font-size: 16px;\n  padding: 12px 0;\n  border-bottom: 1px solid #333;\n}\n\n.field-input {\n  width: 100%;\n  background: #2a2a2a;\n  border: 1px solid #444;\n  border-radius: 8px;\n  padding: 12px 16px;\n  color: #fff;\n  font-size: 16px;\n  transition: all 0.2s;\n}\n\n.field-input:focus {\n  outline: none;\n  border-color: #1DB954;\n  box-shadow: 0 0 0 2px rgba(29, 185, 84, 0.2);\n}\n\n.premium-status {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 12px 0;\n  border-bottom: 1px solid #333;\n}\n\n.status-badge {\n  padding: 6px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n.status-badge.free {\n  background: #333;\n  color: #999;\n}\n\n.status-badge.premium {\n  background: linear-gradient(135deg, #1DB954, #1ed760);\n  color: #fff;\n}\n\n.upgrade-badge {\n  background: transparent;\n  border: 1px solid #1DB954;\n  color: #1DB954;\n  padding: 6px 12px;\n  border-radius: 20px;\n  font-size: 12px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.upgrade-badge:hover {\n  background: #1DB954;\n  color: #fff;\n}\n\n/* Profile Actions */\n.profile-actions {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n.save-profile-btn {\n  background: linear-gradient(135deg, #1DB954, #1ed760);\n  color: #fff;\n  border: none;\n  padding: 14px 32px;\n  border-radius: 25px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.save-profile-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(29, 185, 84, 0.3);\n}\n\n/* Stats Section */\n.profile-stats {\n  background: #1a1a1a;\n  border-radius: 16px;\n  padding: 24px;\n  border: 1px solid #333;\n}\n\n.stats-title {\n  color: #fff;\n  margin: 0 0 20px 0;\n  font-size: 20px;\n  font-weight: 600;\n}\n\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 20px;\n}\n\n.stat-item {\n  text-align: center;\n  padding: 16px;\n  background: #2a2a2a;\n  border-radius: 12px;\n  transition: all 0.2s;\n}\n\n.stat-item:hover {\n  background: #333;\n  transform: translateY(-2px);\n}\n\n.stat-number {\n  color: #1DB954;\n  font-size: 28px;\n  font-weight: 700;\n  margin-bottom: 4px;\n}\n\n.stat-label {\n  color: #999;\n  font-size: 14px;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .view-profile-screen {\n    padding: 16px;\n  }\n  \n  .profile-header {\n    flex-direction: column;\n    gap: 16px;\n    text-align: center;\n  }\n  \n  .profile-picture-container {\n    width: 120px;\n    height: 120px;\n  }\n  \n  .profile-icon-large {\n    font-size: 48px;\n  }\n  \n  .stats-grid {\n    grid-template-columns: repeat(3, 1fr);\n    gap: 16px;\n  }\n  \n  .stat-number {\n    font-size: 24px;\n  }\n}","size_bytes":29086},"src/index.js":{"content":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n// Inicijalizacija Pi Network SDK\nif (window.Pi) {\n  window.Pi.init({ version: \"2.0\" });\n}\n\n// Pi Network SDK init\nif (window.Pi) {\n  window.Pi.init({ version: \"2.0\" });\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);","size_bytes":426},"src/components/SongItem.js":{"content":"import React from 'react';\n\nexport default function SongItem({ song, onPress }) {\n  return (\n    <div className=\"song-item\" onClick={onPress}>\n      <div className=\"song-cover\">\n        <span>{song.cover}</span>\n      </div>\n      \n      <div className=\"song-text\">\n        <div className=\"song-title\">\n          {song.title}\n        </div>\n        <div className=\"song-artist\">\n          {song.artist}\n        </div>\n      </div>\n      \n      <div className=\"song-play-indicator\">\n        <span className=\"song-play-icon\">▶</span>\n      </div>\n    </div>\n  );\n}","size_bytes":564},"src/screens/HomeScreen.js":{"content":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ModernAudioPlayer from '../components/ModernAudioPlayer';\nimport { loadMusicLibrary } from '../services/libraryLoader';\n// Dinamičko učitavanje (mp3 + png) parova iz Supabase Storage-a.\n\nexport default function HomeScreen() {\n  const navigate = useNavigate();\n  const [songs, setSongs] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n\n  React.useEffect(() => {\n    let active = true;\n    (async () => {\n      try {\n        setLoading(true);\n        const list = await loadMusicLibrary();\n        if (active) setSongs(list);\n      } catch (e) {\n        if (active) setError(e.message);\n      } finally {\n        if (active) setLoading(false);\n      }\n    })();\n    return () => { active = false; };\n  }, []);\n\n  // Helper function to shuffle array and get random subset\n  const getRandomSongs = (songsArray, count = 10) => {\n    if (songsArray.length === 0) return [];\n    const shuffled = [...songsArray].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, Math.min(count, shuffled.length));\n  };\n\n  // Create different random sets for each category - 10 songs each\n  const madeForYouSongs = getRandomSongs(songs, 10);\n  const recentlyPlayedSongs = getRandomSongs(songs, 10);\n  const trendingNowSongs = getRandomSongs(songs, 10);\n\n  const [selectedSong, setSelectedSong] = React.useState(null);\n  const [playerOpen, setPlayerOpen] = React.useState(false);\n\n  const handlePlaySong = (song) => {\n    setSelectedSong(song);\n    setPlayerOpen(true);\n  };\n\n  const handleClosePlayer = () => {\n    setPlayerOpen(false);\n    setSelectedSong(null);\n  };\n\n  return (\n    <div className=\"home-screen\">\n      <div className=\"search-bar-container\">\n        <div className=\"search-bar\" onClick={() => navigate('/search')} style={{cursor: 'pointer'}}>\n          <span className=\"search-icon\">🔍</span>\n          <input\n            type=\"text\"\n            placeholder=\"Artists, songs, or podcasts\"\n            className=\"search-input\"\n            onClick={() => navigate('/search')}\n            style={{cursor: 'pointer'}}\n            readOnly\n          />\n        </div>\n      </div>\n\n      {loading && (\n        <div style={{color:'#888', fontSize:12, marginBottom:20}}>Loading songs...</div>\n      )}\n      {error && (\n        <div style={{color:'#ff5555', fontSize:12, marginBottom:20}}>Error: {error}</div>\n      )}\n\n      {/* Made for you section */}\n      <section className=\"home-section\">\n        <h2 className=\"section-title\">Made for you</h2>\n        <div className=\"songs-slider\">\n          {madeForYouSongs.map((song, idx) => (\n            <div key={idx} className=\"song-card-slider\" onClick={() => handlePlaySong(song)} role=\"button\" tabIndex={0} onKeyDown={(e) => { if (e.key === 'Enter') handlePlaySong(song); }}>\n              <div className=\"song-card-cover-slider\">\n                <img src={song.cover} alt={song.title} loading=\"lazy\" />\n              </div>\n              <div className=\"song-card-title-slider\" title={song.title}>{song.title}</div>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* Recently played section */}\n      <section className=\"home-section\">\n        <h2 className=\"section-title\">Recently played</h2>\n        <div className=\"songs-slider\">\n          {recentlyPlayedSongs.map((song, idx) => (\n            <div key={idx} className=\"song-card-slider\" onClick={() => handlePlaySong(song)} role=\"button\" tabIndex={0} onKeyDown={(e) => { if (e.key === 'Enter') handlePlaySong(song); }}>\n              <div className=\"song-card-cover-slider\">\n                <img src={song.cover} alt={song.title} loading=\"lazy\" />\n              </div>\n              <div className=\"song-card-title-slider\" title={song.title}>{song.title}</div>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* Trending now section */}\n      <section className=\"home-section\">\n        <h2 className=\"section-title\">Trending now</h2>\n        <div className=\"songs-slider\">\n          {trendingNowSongs.map((song, idx) => (\n            <div key={idx} className=\"song-card-slider\" onClick={() => handlePlaySong(song)} role=\"button\" tabIndex={0} onKeyDown={(e) => { if (e.key === 'Enter') handlePlaySong(song); }}>\n              <div className=\"song-card-cover-slider\">\n                <img src={song.cover} alt={song.title} loading=\"lazy\" />\n              </div>\n              <div className=\"song-card-title-slider\" title={song.title}>{song.title}</div>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {playerOpen && selectedSong && (\n        <ModernAudioPlayer \n          key={selectedSong.title} \n          autoPlay \n          onClose={handleClosePlayer}\n          song={{\n            ...selectedSong,\n            src: selectedSong.url\n          }} \n        />\n      )}\n    </div>\n  );\n}","size_bytes":4930},"src/screens/PlayerScreen.js":{"content":"import React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nexport default function PlayerScreen() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { song } = location.state || { song: { title: 'Unknown', artist: 'Unknown', cover: '🎵' } };\n  \n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(45);\n  const [duration] = useState(180);\n\n  const togglePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const progressPercentage = Math.min(Math.max((currentTime / duration) * 100, 0), 100);\n\n  return (\n    <div className=\"player-container\">\n      <div className=\"header\">\n        <button className=\"header-back\" onClick={() => navigate('/')}>\n          ← Back\n        </button>\n        <h2 className=\"header-subtitle\">Now Playing</h2>\n        <div></div>\n      </div>\n\n      <div className=\"player-cover-section\">\n        <div className=\"player-cover\">\n          <span>{song.cover}</span>\n        </div>\n      </div>\n\n      <div className=\"player-info\">\n        <h1 className=\"player-title\">{song.title}</h1>\n        <p className=\"player-artist\">{song.artist}</p>\n      </div>\n\n      <div className=\"player-progress\">\n        <div className=\"progress-bar\">\n          <div \n            className=\"progress-fill\" \n            style={{ width: `${progressPercentage}%` }}\n          />\n          <div \n            className=\"progress-thumb\" \n            style={{ left: `${progressPercentage}%` }}\n          />\n        </div>\n        <div className=\"progress-time\">\n          <span className=\"time-text\">{formatTime(currentTime)}</span>\n          <span className=\"time-text\">{formatTime(duration)}</span>\n        </div>\n      </div>\n\n      <div className=\"player-controls\">\n        <button className=\"control-button\">\n          ⏮\n        </button>\n\n        <button className=\"play-button\" onClick={togglePlayPause}>\n          {isPlaying ? '⏸' : '▶'}\n        </button>\n\n        <button className=\"control-button\">\n          ⏭\n        </button>\n      </div>\n\n      <div className=\"player-bottom\">\n        <button className=\"icon-button\">\n          🔀\n        </button>\n        <button className=\"icon-button\">\n          🔁\n        </button>\n        <button className=\"icon-button\">\n          🤍\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":2556},"README.md":{"content":"# PurpleMusicApp\n\n## Deploy / Struktura\n\nFrontend (React) i backend (Express) su u istom repozitorijumu:\n\n```\nroot/\n\tbackend/          # Express API (Render)\n\tsrc/              # React source (Netlify ili lokalni build)\n\tpublic/\n```\n\n`build/` folder se NE commituje više (ignorisan u `.gitignore`). Generiše se dinamički:\n\n```\nnpm run build   # kreira build/ lokalno\n```\n\n## Render backend\nBuild command (ako je service root repo):\n```\nnpm install\n```\nStart command:\n```\nnode backend/server.js\n```\n\nPotrebne env varijable (Render > Environment):\n```\nSUPABASE_SERVICE_KEY=<service_role_key>\nPI_API_KEY=<pi_server_api_key>\n```\n\n## Pi Payments Flow\nKoristimo approve / complete pattern:\n1. Pi SDK -> onReadyForServerApproval -> POST /api/payments/approve\n2. Pi SDK -> onReadyForServerCompletion (paymentId, txid) -> POST /api/payments/complete\n3. Backend validira i postavlja `is_premium=true` u Supabase.\n\n## Razlog uklanjanja build foldera\nSmanjuje veličinu repozitorijuma i ubrzava Render kloniranje / deploy.","size_bytes":1013},"netlify.toml":{"content":"[build]\n  command = \"npm run build\"\n  publish = \"build\"\n\n  node_version = \"18.20.2\"\n\n[dev]\n  command = \"npm start\"\n  port = 3000\n\n[template.environment]\n  SUPABASE_URL = \"https://ofkfygqrfenctzitigae.supabase.co\"\n  SUPABASE_ANON_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9ma2Z5Z3FyZmVuY3R6aXRpZ2FlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2NjgwMjcsImV4cCI6MjA3MzI0NDAyN30.-GFl3-IncJ7hno_LHE5jtCOe_HI07nxwiq3aaISHolo\"\n\n[[redirects]]\n  from = \"/validation-key.txt\"\n  to = \"/validation-key.txt\"\n  status = 200\n\n[[redirects]]\n  from = \"/privacy-policy.html\"\n  to = \"/privacy-policy.html\"\n  status = 200\n\n[[redirects]]\n  from = \"/terms-of-service.html\"\n  to = \"/terms-of-service.html\"\n  status = 200\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n","size_bytes":789},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":81},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./public/index.html\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        'spotify-green': '#1DB954',\n        'dark-gray': '#121212',\n        'light-gray': '#282828'\n      },\n      backdropBlur: {\n        xs: '2px',\n      }\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n  ],\n}","size_bytes":407},"backend/server.js":{"content":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\n\nconst axios = require('axios');\nconst { createClient } = require('@supabase/supabase-js');\n// Supabase setup\nconst SUPABASE_URL = 'https://ofkfygqrfenctzitigae.supabase.co';\nconst SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;\nif (!SUPABASE_SERVICE_KEY) {\n  console.error('[BOOT] Missing SUPABASE_SERVICE_KEY environment variable. Set it in Render -> Environment.');\n}\nconst supabase = SUPABASE_SERVICE_KEY ? createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY) : null;\nconst verifyLogin = require('./api/verify-login');\n\n// Pi API key presence log\nif (!process.env.PI_API_KEY) {\n  console.error('[BOOT] Missing PI_API_KEY environment variable. Set PI_API_KEY in Render Environment (Server API Key from Pi Developer dashboard).');\n}\n\nconst app = express();\n\napp.use(cors());\napp.use(bodyParser.json());\n\n\napp.post('/api/verify-login', verifyLogin);\n\n// Pi Network payment verification endpoint\napp.post('/api/verify-payment', async (req, res) => {\n  const startedAt = Date.now();\n  // Debug: ulazni payload (sanitized)\n  console.log('[verify-payment] incoming body =', JSON.stringify(req.body));\n  const { paymentId, pi_user_uid } = req.body || {};\n  if (!paymentId) {\n    console.warn('[verify-payment] Missing paymentId field');\n    return res.status(400).json({ success: false, error: 'Missing paymentId' });\n  }\n  if (!pi_user_uid) {\n    console.warn('[verify-payment] Missing pi_user_uid field');\n    return res.status(400).json({ success: false, error: 'Missing pi_user_uid' });\n  }\n  try {\n    const piApiKey = process.env.PI_API_KEY; // Server-side Pi API key\n    if (!piApiKey) {\n      console.error('[verify-payment] PI_API_KEY not set in environment');\n      return res.status(500).json({ success: false, error: 'PI_API_KEY not configured on server' });\n    }\n    const piPaymentUrl = `https://api.minepi.com/v2/payments/${paymentId}`;\n    console.log('[verify-payment] Fetching from Pi API:', piPaymentUrl);\n    let payment;\n    try {\n      const piResponse = await axios.get(piPaymentUrl, {\n        headers: { Authorization: `Key ${piApiKey}` }\n      });\n      payment = piResponse.data;\n    } catch (piErr) {\n      const status = piErr?.response?.status;\n      const data = piErr?.response?.data;\n      console.error('[verify-payment] Pi API request failed', { status, data });\n      if (status === 401) {\n        return res.status(502).json({ success: false, error: 'Pi API authentication failed (401). Check PI_API_KEY.' });\n      }\n      if (status === 404) {\n        return res.status(400).json({ success: false, error: 'Unknown paymentId (404 from Pi API)' });\n      }\n      return res.status(502).json({ success: false, error: 'Pi API error', details: data });\n    }\n\n    // Log kratak rezime payment objekta (bez potencijalno osetljivih polja)\n    try {\n      console.log('[verify-payment] payment summary =', JSON.stringify({\n        id: payment.identifier || payment.id || payment.payment_id || paymentId,\n        status: payment.status,\n        amount: payment.amount,\n        metadata: payment.metadata,\n        created_at: payment.created_at\n      }));\n    } catch (_) {}\n\n    if (!(payment && payment.status)) {\n      console.warn('[verify-payment] Payment response missing status');\n      return res.status(502).json({ success: false, error: 'Invalid payment response from Pi API' });\n    }\n\n    if (payment.status === 'completed' && payment.metadata?.type === 'premium') {\n      if (!supabase) {\n        return res.status(500).json({ success: false, error: 'Supabase client not initialized (missing SUPABASE_SERVICE_KEY)' });\n      }\n      const { error } = await supabase\n        .from('users')\n        .update({ is_premium: true })\n        .eq('pi_user_uid', pi_user_uid);\n      if (error) {\n        console.error('[verify-payment] Supabase update error:', error.message);\n        return res.status(500).json({ success: false, error: 'Supabase update error: ' + error.message });\n      }\n      console.log('[verify-payment] PREMIUM ACTIVATED for', pi_user_uid, 'in', Date.now() - startedAt, 'ms');\n      return res.json({ success: true, paymentStatus: payment.status });\n    }\n\n    console.warn('[verify-payment] Payment not completed or invalid metadata', {\n      status: payment.status,\n      metadata: payment.metadata\n    });\n    return res.status(400).json({ success: false, error: 'Payment not completed or invalid metadata.type', status: payment.status });\n  } catch (err) {\n    console.error('[verify-payment] Unhandled error:', err);\n    return res.status(500).json({ success: false, error: 'Internal server error' });\n  }\n});\n\n// --- New Pi Payments Flow Endpoints (approve & complete) ---\n// Approve payment (server side) when client notifies onReadyForServerApproval\nasync function approveHandler(req, res) {\n  const { paymentId, pi_user_uid } = req.body || {};\n  const debug = process.env.NODE_ENV !== 'production';\n  if (debug) console.log('[approve] incoming body:', req.body);\n  if (!paymentId) {\n    console.warn('[approve] early exit: missing paymentId');\n    return res.status(400).json({ success: false, error: 'Missing paymentId', code: 'NO_PAYMENT_ID' });\n  }\n  const piApiKey = process.env.PI_API_KEY;\n  if (!piApiKey) {\n    console.error('[approve] PI_API_KEY not set');\n    return res.status(500).json({ success: false, error: 'PI_API_KEY not configured', code: 'NO_PI_KEY' });\n  }\n  try {\n    const paymentUrl = `https://api.minepi.com/v2/payments/${paymentId}`;\n    const fetchResp = await axios.get(paymentUrl, { headers: { Authorization: `Key ${piApiKey}` } });\n    const payment = fetchResp.data;\n    // Log a sanitized snapshot for debugging\n    try {\n      console.log('[approve] fetched payment snapshot:', JSON.stringify({\n        id: payment.identifier || payment.id || payment.payment_id || paymentId,\n        status: payment.status,\n        amount: payment.amount,\n        memo: payment.memo,\n        metadata: payment.metadata,\n        created_at: payment.created_at\n      }));\n    } catch (_) {}\n\n    // Some Pi API versions return status as string, newer return an object with flags.\n    const rawStatus = payment.status;\n    const statusIsString = typeof rawStatus === 'string';\n    const statusObj = (!statusIsString && rawStatus && typeof rawStatus === 'object') ? rawStatus : null;\n\n    // Derive normalized states\n    let isPendingOrCreated = false;\n    let isAlreadyApproved = false;\n    let isAlreadyCompleted = false;\n\n    if (statusIsString) {\n      const s = rawStatus;\n      if (['pending', 'created'].includes(s)) isPendingOrCreated = true;\n      else if (s === 'approved') isAlreadyApproved = true;\n      else if (s === 'completed') isAlreadyCompleted = true;\n    } else if (statusObj) {\n      // Object form: determine from flags\n      if (statusObj.developer_completed) isAlreadyCompleted = true;\n      else if (statusObj.developer_approved) isAlreadyApproved = true;\n      else if (!statusObj.cancelled && !statusObj.user_cancelled && !statusObj.developer_approved && !statusObj.developer_completed) {\n        // Not approved yet, not completed, no cancellations\n        isPendingOrCreated = true;\n      }\n    }\n\n    // Metadata/type validation (be tolerant): allow if metadata.type==='premium' OR memo contains 'Premium'\n    const metaType = payment?.metadata?.type;\n    const memo = payment?.memo || '';\n    if (!payment || (!metaType && !/premium/i.test(memo))) {\n      console.warn('[approve] metadata/type check failed', { metaType, memo });\n      return res.status(400).json({ success: false, error: 'Missing or invalid metadata.type (expected premium)', code: 'NO_METADATA_OR_TYPE', paymentStatus: payment?.status });\n    }\n    if (metaType && metaType !== 'premium') {\n      console.warn('[approve] unexpected metadata.type', metaType);\n      return res.status(400).json({ success: false, error: 'Unexpected payment metadata.type', expected: 'premium', got: metaType, code: 'BAD_TYPE', paymentStatus: payment.status });\n    }\n    if (isAlreadyCompleted) {\n      console.log('[approve] payment already completed', paymentId);\n      return res.json({ success: true, status: 'completed', already: true });\n    }\n    if (isAlreadyApproved) {\n      console.log('[approve] payment already approved', paymentId);\n      return res.json({ success: true, status: 'approved', already: true });\n    }\n    if (!isPendingOrCreated) {\n      console.warn('[approve] rejecting due to status shape', rawStatus);\n      return res.status(400).json({ success: false, error: 'Payment not in approvable state', status: rawStatus, code: 'BAD_STATUS_SHAPE' });\n    }\n    const approveUrl = `https://api.minepi.com/v2/payments/${paymentId}/approve`;\n    await axios.post(approveUrl, {}, { headers: { Authorization: `Key ${piApiKey}` } });\n    if (debug) console.log('[approve] OK approve sent for', paymentId);\n    return res.json({ success: true, status: 'approved', paymentId });\n  } catch (err) {\n    const status = err?.response?.status;\n    const data = err?.response?.data;\n    console.error('[approve] error', { status, data });\n    return res.status(502).json({ success: false, error: 'Approve failed', status, details: data || err.message, code: 'APPROVE_EXCEPTION' });\n  }\n}\n\nasync function completeHandler(req, res) {\n  const { paymentId, pi_user_uid, txid } = req.body || {};\n  const debug = process.env.NODE_ENV !== 'production';\n  if (debug) console.log('[complete] incoming body:', req.body);\n  if (!paymentId) {\n    console.warn('[complete] missing paymentId');\n    return res.status(400).json({ success: false, error: 'Missing paymentId', code: 'NO_PAYMENT_ID' });\n  }\n  if (!txid) {\n    console.warn('[complete] missing txid');\n    return res.status(400).json({ success: false, error: 'Missing txid', code: 'NO_TXID' });\n  }\n  if (!pi_user_uid) {\n    console.warn('[complete] missing pi_user_uid');\n    return res.status(400).json({ success: false, error: 'Missing pi_user_uid', code: 'NO_PI_UID' });\n  }\n  const piApiKey = process.env.PI_API_KEY;\n  if (!piApiKey) {\n    console.error('[complete] PI_API_KEY not set');\n    return res.status(500).json({ success: false, error: 'PI_API_KEY not configured', code: 'NO_PI_KEY' });\n  }\n  try {\n    const completeUrl = `https://api.minepi.com/v2/payments/${paymentId}/complete`;\n    await axios.post(completeUrl, { txid }, { headers: { Authorization: `Key ${piApiKey}` } });\n    const paymentUrl = `https://api.minepi.com/v2/payments/${paymentId}`;\n    const fetchResp = await axios.get(paymentUrl, { headers: { Authorization: `Key ${piApiKey}` } });\n    const payment = fetchResp.data;\n    let isCompleted = false;\n    if (typeof payment.status === 'string') {\n      isCompleted = payment.status === 'completed';\n    } else if (payment.status && typeof payment.status === 'object') {\n      isCompleted = !!payment.status.developer_completed;\n    }\n    if (!isCompleted) {\n      console.warn('[complete] still not completed, raw status=', payment.status);\n      return res.status(400).json({ success: false, error: 'Payment not completed after complete call', status: payment.status, code: 'NOT_COMPLETED' });\n    }\n    if (!supabase) {\n      return res.status(500).json({ success: false, error: 'Supabase client not initialized (missing SUPABASE_SERVICE_KEY)', code: 'NO_SUPABASE' });\n    }\n    const { error } = await supabase\n      .from('users')\n      .update({ is_premium: true })\n      .eq('pi_user_uid', pi_user_uid);\n    if (error) {\n      return res.status(500).json({ success: false, error: 'Supabase update error: ' + error.message, code: 'SUPABASE_UPDATE' });\n    }\n    if (debug) console.log('[complete] premium activated for', pi_user_uid, 'paymentId=', paymentId);\n    return res.json({ success: true, status: 'completed', paymentId, txid });\n  } catch (err) {\n    const status = err?.response?.status;\n    const data = err?.response?.data;\n    console.error('[complete] error', { status, data });\n    return res.status(502).json({ success: false, error: 'Complete failed', status, details: data || err.message, code: 'COMPLETE_EXCEPTION' });\n  }\n}\n\n// Original routes\napp.post('/api/payments/approve', approveHandler);\napp.post('/api/payments/complete', completeHandler);\n// Alias routes (Pi demo naming)\napp.post('/api/approve-payment', approveHandler);\napp.post('/api/complete-payment', completeHandler);\n\n// Inspect endpoint za ručno debugovanje payment objekta\napp.get('/api/payments/inspect/:paymentId', async (req, res) => {\n  const { paymentId } = req.params;\n  const piApiKey = process.env.PI_API_KEY;\n  if (!piApiKey) return res.status(500).json({ success: false, error: 'PI_API_KEY not configured', code: 'NO_PI_KEY' });\n  try {\n    const url = `https://api.minepi.com/v2/payments/${paymentId}`;\n    const r = await axios.get(url, { headers: { Authorization: `Key ${piApiKey}` } });\n    return res.json({ success: true, payment: r.data });\n  } catch (err) {\n    return res.status(502).json({ success: false, error: 'Inspect failed', status: err?.response?.status, details: err?.response?.data || err.message });\n  }\n});\n\napp.get('/', (req, res) => {\n  res.send('PurpleMusic Pi Network backend is running!');\n});\n\nconst PORT = process.env.PORT || 8080;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n","size_bytes":13304},"src/apiAxios.js":{"content":"\nimport { apiKey } from './config';\nimport axios from 'axios';\n\nconst baseURL = process.env.REACT_APP_API_URL || 'https://purplemusicapp.onrender.com';\n\nconst apiAxios = axios.create({\n  baseURL,\n  headers: {\n    Authorization: `Bearer ${apiKey}`,\n  },\n});\n\nexport default apiAxios;\n","size_bytes":283},"src/config.js":{"content":"const apiKey = process.env.API_KEY;\nmodule.exports = { apiKey };\n","size_bytes":65},"src/piSdkLoader.js":{"content":"// Pi Network SDK loader for web\n// This script should be loaded in public/index.html or dynamically in React\n\nexport function loadPiSDK(onLoad) {\n  if (window.Pi) {\n    onLoad(window.Pi);\n    return;\n  }\n  const script = document.createElement('script');\n  script.src = 'https://sdk.minepi.com/pi-sdk.js';\n  script.async = true;\n  script.onload = () => {\n    onLoad(window.Pi);\n  };\n  document.body.appendChild(script);\n}\n\n// Example usage:\n// loadPiSDK((Pi) => { /* Pi.login(), Pi.createPayment(), ... */ });\n","size_bytes":511},"src/supabaseClient.js":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst SUPABASE_URL = 'https://ofkfygqrfenctzitigae.supabase.co';\nconst SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9ma2Z5Z3FyZmVuY3R6aXRpZ2FlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2NjgwMjcsImV4cCI6MjA3MzI0NDAyN30.-GFl3-IncJ7hno_LHE5jtCOe_HI07nxwiq3aaISHolo';\n\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);","size_bytes":429},"backend/api/verify-login.js":{"content":"// Express handler for /api/verify-login\n// Pi Network backend validation (see https://github.com/pi-apps/demo/blob/main/backend/README.md)\n\nconst axios = require('axios');\n\nmodule.exports = async function (req, res) {\n  const { accessToken } = req.body;\n  if (!accessToken) {\n    return res.status(400).json({ error: 'Missing accessToken' });\n  }\n\n  try {\n    // Validate token with Pi Network\n    const piApiUrl = 'https://api.minepi.com/v2/me';\n    const piRes = await axios.get(piApiUrl, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    // piRes.data: { username, ... }\n    if (piRes.data && piRes.data.username) {\n      return res.json({ username: piRes.data.username });\n    } else {\n      return res.status(401).json({ error: 'Invalid token or no username' });\n    }\n  } catch (err) {\n    return res.status(500).json({ error: err.message || 'Pi Network validation failed' });\n  }\n};\n","size_bytes":927},"src/components/BottomNavigation.js":{"content":"import React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nexport default function BottomNavigation() {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const getIcon = (path) => {\n    const isActive = location.pathname === path;\n    \n    switch (path) {\n      case '/':\n        return (\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n            <path d=\"m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"/>\n            <polyline points=\"9,22 9,12 15,12 15,22\"/>\n          </svg>\n        );\n      case '/search':\n        return (\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n            <circle cx=\"11\" cy=\"11\" r=\"8\"/>\n            <path d=\"m21 21-4.35-4.35\"/>\n          </svg>\n        );\n      case '/liked':\n        return (\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n            <path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"/>\n          </svg>\n        );\n      case '/playlists':\n        return (\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n            <path d=\"M9 12l2 2 4-4\"/>\n            <path d=\"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3V3c0-1.66 4-3 9-3s9 1.34 9 3v9z\"/>\n          </svg>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const navItems = [\n    { path: '/', label: 'Home' },\n    { path: '/search', label: 'Search' },\n    { path: '/liked', label: 'Liked Songs' },\n    { path: '/playlists', label: 'My Playlists' }\n  ];\n\n  return (\n    <nav className=\"bottom-navigation\">\n      {navItems.map((item) => (\n        <button\n          key={item.path}\n          className={`nav-item ${location.pathname === item.path ? 'active' : ''}`}\n          onClick={() => navigate(item.path)}\n        >\n          <span className=\"nav-icon\">{getIcon(item.path)}</span>\n          <span className=\"nav-label\">{item.label}</span>\n        </button>\n      ))}\n    </nav>\n  );\n}","size_bytes":2186},"src/components/Header.js":{"content":"import React from 'react';\nimport ProfileDropdown from './ProfileDropdown';\n\nexport default function Header() {\n  return (\n    <header className=\"header\">\n      <div className=\"header-logo\">\n        <img \n          src=\"/logo.png?v=3\" \n          alt=\"PurpleMusic Logo\" \n          className=\"logo-image\"\n        />\n        <span className=\"logo-text\">PurpleMusic</span>\n      </div>\n      \n      <div className=\"header-profile\">\n        <ProfileDropdown />\n      </div>\n    </header>\n  );\n}","size_bytes":489},"src/components/ModernAudioPlayer.js":{"content":"import React, { useRef, useState, useEffect } from 'react';\nimport { checkSongLiked, likeSong, unlikeSong, isUserLoggedIn } from '../services/likeService';\n\nconst demoSong = {\n  id: 'demo_night_owl',\n  title: 'Night Owl',\n  artist: 'Annie Walker',\n  cover: 'https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=facearea&w=64&h=64',\n  src: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3',\n  duration: 205\n};\n\nexport default function ModernAudioPlayer({ song = demoSong, autoPlay = false, onClose = null }) {\n  const audioRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [duration, setDuration] = useState(song.duration);\n  const [volume, setVolume] = useState(0.8);\n  const [dragOffset, setDragOffset] = useState(0);\n  const [playerBottom, setPlayerBottom] = useState(120); // default offset from bottom - above footer\n  const [translateY, setTranslateY] = useState(0);\n  const [dragging, setDragging] = useState(false);\n  const [startY, setStartY] = useState(null);\n  const [touchStartY, setTouchStartY] = useState(null);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n  const [showPremiumPopup, setShowPremiumPopup] = useState(false);\n\n  // Premium check function - for demo purposes, simulate some premium users\n  const isPremium = () => {\n    // For demo: Check if user has set premium in localStorage for testing\n    // In real app, this would check actual subscription/payment status\n    const userId = localStorage.getItem('user_id');\n    return localStorage.getItem('premium_demo') === 'true' || \n           (userId && userId.includes('premium')); // demo premium users\n  };\n\n  // Play/Pause\n  const togglePlay = () => {\n    if (!audioRef.current) return;\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  // Mute/Unmute\n  const toggleMute = () => {\n    setIsMuted((prev) => {\n      if (audioRef.current) audioRef.current.muted = !prev;\n      return !prev;\n    });\n  };\n\n  // Progress\n  const handleTimeUpdate = () => {\n    setProgress(audioRef.current.currentTime);\n  };\n  const handleLoadedMetadata = () => {\n    setDuration(audioRef.current.duration);\n  };\n  const handleSeek = (e) => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.nativeEvent.clientX - rect.left;\n    const percent = x / rect.width;\n    const seekTime = percent * duration;\n    audioRef.current.currentTime = seekTime;\n    setProgress(seekTime);\n  };\n\n  // Volume\n  const handleVolumeChange = (e) => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.nativeEvent.clientX - rect.left;\n    const percent = Math.min(Math.max(x / rect.width, 0), 1);\n    setVolume(percent);\n    if (audioRef.current) audioRef.current.volume = percent;\n  };\n\n  // Mouse Drag & Drop\n  const handleDragStart = (e) => {\n    setDragging(true);\n    setStartY(e.clientY);\n    document.body.style.overflow = 'hidden';\n  };\n  const handleDrag = (e) => {\n    if (!dragging) return;\n    const offset = e.clientY - startY;\n    setTranslateY(offset);\n  };\n  const handleDragEnd = () => {\n    if (!dragging) return;\n    const offset = translateY;\n    const maxOffset = window.innerHeight - 180;\n    const newBottom = Math.max(0, Math.min(playerBottom - offset, maxOffset));\n    setPlayerBottom(newBottom);\n    setDragging(false);\n    setStartY(null);\n    setTranslateY(0);\n    document.body.style.overflow = '';\n  };\n\n  // Touch Drag & Drop\n  const handleTouchStart = (e) => {\n    if (e.touches.length === 1) {\n      setDragging(true);\n      setTouchStartY(e.touches[0].clientY);\n      document.body.style.overflow = 'hidden';\n    }\n  };\n  const handleTouchMove = (e) => {\n    if (!dragging || e.touches.length !== 1) return;\n    e.preventDefault();\n    const offset = e.touches[0].clientY - touchStartY;\n    setTranslateY(offset);\n  };\n  const handleTouchEnd = () => {\n    if (!dragging) return;\n    const offset = translateY;\n    const maxOffset = window.innerHeight - 180;\n    const newBottom = Math.max(0, Math.min(playerBottom - offset, maxOffset));\n    setPlayerBottom(newBottom);\n    setDragging(false);\n    setTouchStartY(null);\n    setTranslateY(0);\n    document.body.style.overflow = '';\n  };\n\n  // Format time\n  const formatTime = (s) => {\n    if (!s) return '0:00';\n    const m = Math.floor(s / 60);\n    const sec = Math.floor(s % 60).toString().padStart(2, '0');\n    return `${m}:${sec}`;\n  };\n\n  // Like/Unlike functionality\n  const toggleLike = async () => {\n    if (!isUserLoggedIn()) {\n      alert('Please log in to like songs!');\n      return;\n    }\n    \n    if (!isPremium()) {\n      setShowPremiumPopup(true);\n      return;\n    }\n    \n    try {\n      if (isLiked) {\n        const success = await unlikeSong(song.id);\n        if (success) {\n          setIsLiked(false);\n        }\n      } else {\n        const success = await likeSong(song);\n        if (success) {\n          setIsLiked(true);\n        }\n      }\n    } catch (error) {\n      console.error('Error toggling like:', error);\n    }\n  };\n  \n  // Check if song is liked on component mount\n  useEffect(() => {\n    const checkLikeStatus = async () => {\n      if (song?.id && isUserLoggedIn()) {\n        const liked = await checkSongLiked(song.id);\n        setIsLiked(liked);\n      }\n    };\n    \n    checkLikeStatus();\n  }, [song?.id]);\n\n  // Skip functionality with premium check\n  const handlePrev = () => {\n    if (!isPremium()) {\n      setShowPremiumPopup(true);\n      return;\n    }\n    // Premium functionality: actual skip to previous track\n    audioRef.current.currentTime = 0;\n    setProgress(0);\n  };\n  const handleNext = () => {\n    if (!isPremium()) {\n      setShowPremiumPopup(true);\n      return;\n    }\n    // Premium functionality: actual skip to next track\n    audioRef.current.currentTime = duration;\n    setProgress(duration);\n  };\n\n  const closePremiumPopup = () => {\n    setShowPremiumPopup(false);\n  };\n\n  // Attach drag listeners\n  React.useEffect(() => {\n    if (dragging) {\n      window.addEventListener('mousemove', handleDrag);\n      window.addEventListener('mouseup', handleDragEnd);\n      window.addEventListener('touchmove', handleTouchMove, { passive: false });\n      window.addEventListener('touchend', handleTouchEnd);\n      return () => {\n        window.removeEventListener('mousemove', handleDrag);\n        window.removeEventListener('mouseup', handleDragEnd);\n        window.removeEventListener('touchmove', handleTouchMove);\n        window.removeEventListener('touchend', handleTouchEnd);\n      };\n    }\n  }, [dragging, startY, touchStartY]);\n\n  // Auto play when song changes if requested\n  React.useEffect(() => {\n    if (autoPlay && audioRef.current) {\n      // slight timeout to ensure metadata loads\n      const t = setTimeout(() => {\n        audioRef.current.play().then(() => setIsPlaying(true)).catch(() => {});\n      }, 50);\n      return () => clearTimeout(t);\n    }\n  }, [song?.src, autoPlay]);\n\n  return (\n    <div\n      className=\"fixed z-50\"\n      style={{\n        left: 0,\n        right: 0,\n        margin: '0 auto',\n        bottom: `${playerBottom}px`,\n        transform: `translateY(${translateY}px)`,\n        transition: dragging ? 'none' : 'bottom 0.2s',\n        maxWidth: 420,\n        width: '96vw',\n        cursor: dragging ? 'grabbing' : 'grab',\n        boxSizing: 'border-box',\n        touchAction: 'none',\n      }}\n      onMouseDown={handleDragStart}\n      onTouchStart={handleTouchStart}\n    >\n      <audio\n        ref={audioRef}\n        src={song.src}\n        onTimeUpdate={handleTimeUpdate}\n        onLoadedMetadata={handleLoadedMetadata}\n        onEnded={() => setIsPlaying(false)}\n        volume={volume}\n      />\n      <div className=\"backdrop-blur-md bg-gradient-to-br from-[#1a1a1a]/80 to-[#2d0036]/80 rounded-2xl shadow-lg border border-white/10 flex flex-col px-4 py-3 select-none w-full relative\" style={{minWidth:'0'}}>\n        {/* Top right controls: Close only */}\n        {onClose && (\n          <button \n            onClick={(e) => { e.stopPropagation(); onClose(); }} \n            className=\"absolute top-2 right-2 z-10 w-6 h-6 rounded-full border border-white/40 hover:border-white/80 hover:bg-white/10 flex items-center justify-center text-white/60 hover:text-white transition\"\n            aria-label=\"Close player\"\n          >\n            ×\n          </button>\n        )}\n        \n        {/* Bottom left control: Like */}\n        {song?.id && (\n          <button \n            onClick={e => { e.stopPropagation(); toggleLike(); }} \n            className=\"absolute bottom-2 left-2 z-10 p-1 group\"\n            title={!isUserLoggedIn() ? 'Please log in to like songs' : !isPremium() ? 'Premium Feature - Like songs' : isLiked ? 'Unlike song' : 'Like song'}\n          >\n            <svg width=\"20\" height=\"20\" fill={isLiked ? \"#e53e3e\" : \"none\"} stroke=\"currentColor\" strokeWidth=\"2\" className={`${isLiked ? 'text-red-500' : 'text-white/80'} group-hover:text-red-400 transition ${!isUserLoggedIn() ? 'opacity-50' : ''}`}>\n              <path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"/>\n            </svg>\n          </button>\n        )}\n        \n        {/* Bottom right control: Mute */}\n        <button onClick={e => { e.stopPropagation(); toggleMute(); }} className=\"absolute bottom-2 right-2 z-10 p-1 group\">\n          {isMuted ? (\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"text-white/80 group-hover:text-white transition\">\n              <path d=\"M11 5L6 9H2V15H6L11 19V5Z\"/>\n              <line x1=\"23\" y1=\"9\" x2=\"17\" y2=\"15\"/>\n              <line x1=\"17\" y1=\"9\" x2=\"23\" y2=\"15\"/>\n            </svg>\n          ) : (\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"text-white/80 group-hover:text-white transition\">\n              <path d=\"M11 5L6 9H2V15H6L11 19V5Z\"/>\n              <path d=\"M19.07 4.93A10 10 0 0122 12A10 10 0 0119.07 19.07M15.54 8.46A5 5 0 0117 12A5 5 0 0115.54 15.54\"/>\n            </svg>\n          )}\n        </button>\n        \n        {/* Song info */}\n        <div className=\"flex items-center gap-3 mb-3 pr-16\">\n          <img src={song.cover} alt=\"cover\" className=\"w-12 h-12 rounded-lg object-cover shadow-lg\" />\n          <div className=\"flex flex-col min-w-0 flex-1\">\n            <span className=\"text-white font-semibold truncate text-sm leading-tight\">{song.title}</span>\n            <span className=\"text-white/70 text-sm truncate\">{song.artist}</span>\n          </div>\n        </div>\n        {/* Progress bar */}\n        <div className=\"flex items-center gap-3 mb-4\">\n          <span className=\"text-sm text-white/70 w-10 text-left\">{formatTime(progress)}</span>\n          <div className=\"relative flex-1 h-2 group cursor-pointer\" onClick={e => { e.stopPropagation(); handleSeek(e); }}>\n            <div className=\"absolute w-full h-1 bg-white/20 rounded-full top-0.5\" />\n            <div className=\"absolute h-1 bg-white rounded-full top-0.5\" style={{ width: `${(progress / duration) * 100}%` }} />\n            <div \n              className=\"absolute w-3 h-3 bg-white rounded-full shadow-lg transform -translate-y-1 opacity-0 group-hover:opacity-100 transition-opacity\" \n              style={{ left: `calc(${(progress / duration) * 100}% - 6px)` }}\n            />\n          </div>\n          <span className=\"text-sm text-white/70 w-10 text-right\">{formatTime(duration)}</span>\n        </div>\n        {/* Main Controls - Centered */}\n        <div className=\"flex items-center justify-center gap-6\">\n          <button onClick={e => { e.stopPropagation(); handlePrev(); }} className=\"p-2 group\" title=\"Premium Feature - Skip Previous\">\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"text-white/80 group-hover:text-white transition\">\n              <path d=\"M19 20L9 12L19 4V20Z\"/>\n              <line x1=\"5\" y1=\"19\" x2=\"5\" y2=\"5\"/>\n            </svg>\n          </button>\n          \n          <button onClick={e => { e.stopPropagation(); togglePlay(); }} className=\"p-3 group bg-white/10 rounded-full hover:bg-white/20 transition\">\n            {isPlaying ? (\n              <svg width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2.5\" className=\"text-white group-hover:text-white transition\">\n                <rect x=\"14\" y=\"4\" width=\"4\" height=\"16\" rx=\"2\"/>\n                <rect x=\"6\" y=\"4\" width=\"4\" height=\"16\" rx=\"2\"/>\n              </svg>\n            ) : (\n              <svg width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2.5\" className=\"text-white group-hover:text-white transition\">\n                <polygon points=\"5,3 19,12 5,21\"/>\n              </svg>\n            )}\n          </button>\n          \n          <button onClick={e => { e.stopPropagation(); handleNext(); }} className=\"p-2 group\" title=\"Premium Feature - Skip Next\">\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"text-white/80 group-hover:text-white transition\">\n              <path d=\"M5 4L15 12L5 20V4Z\"/>\n              <line x1=\"19\" y1=\"5\" x2=\"19\" y2=\"19\"/>\n            </svg>\n          </button>\n        </div>\n        \n        {/* Volume Control */}\n        <div className=\"flex items-center justify-center mt-3\">\n          <div className=\"relative w-24 h-2 flex items-center group cursor-pointer\" onClick={e => { e.stopPropagation(); handleVolumeChange(e); }}>\n            <div className=\"absolute w-full h-1 bg-white/20 rounded-full\" />\n            <div className=\"absolute h-1 bg-white/60 rounded-full\" style={{ width: `${volume * 100}%` }} />\n            <div \n              className=\"absolute w-3 h-3 bg-white rounded-full shadow-lg transform -translate-y-1 opacity-0 group-hover:opacity-100 transition-opacity\" \n              style={{ left: `calc(${volume * 100}% - 6px)` }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Premium Popup */}\n      {showPremiumPopup && (\n        <div className=\"premium-popup-overlay\" onClick={closePremiumPopup}>\n          <div className=\"premium-popup\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"premium-header\">\n              <h2>🎵 Premium Feature</h2>\n              <button className=\"close-btn\" onClick={closePremiumPopup}>×</button>\n            </div>\n            <div className=\"premium-content\">\n              <div className=\"premium-icon\">⭐</div>\n              <h3>Enhanced Music Controls</h3>\n              <p>Like songs and skip tracks with premium controls that give you full control over your music experience.</p>\n              \n              <div className=\"premium-price\">\n                <span className=\"price\">3.14π</span>\n                <span className=\"period\">Premium Membership</span>\n              </div>\n              \n              <div className=\"premium-features\">\n                <div className=\"feature\">✓ Like and save favorite songs</div>\n                <div className=\"feature\">✓ Skip to next/previous tracks</div>\n                <div className=\"feature\">✓ Advanced audio controls</div>\n                <div className=\"feature\">✓ Create custom playlists</div>\n              </div>\n              \n              <div className=\"premium-buttons\">\n                <button className=\"upgrade-btn\">Upgrade to Premium</button>\n                <button className=\"cancel-btn\" onClick={closePremiumPopup}>Maybe Later</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":15711},"src/components/ProfileDropdown.js":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function ProfileDropdown() {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n  const navigate = useNavigate();\n  // Konstans za premium cenu\n  const PREMIUM_AMOUNT = 3.14; // Pi\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n\n  const handlePiNetworkLogin = async () => {\n    // Pi Network SDK login\n    if (window.Pi) {\n      const scopes = ['username', 'payments'];\n      const onIncompletePaymentFound = (payment) => {\n        console.log('Incomplete payment found:', payment);\n      };\n      try {\n        const result = await window.Pi.authenticate(scopes, onIncompletePaymentFound);\n        // result: { user, accessToken }\n        if (result && result.accessToken && result.user) {\n          // Pošalji accessToken backendu na /api/verify-login\n          const apiAxios = (await import('../apiAxios')).default;\n          const response = await apiAxios.post('/api/verify-login', { accessToken: result.accessToken });\n          if (response.data && response.data.username) {\n            // Sačuvaj korisnika na Supabase\n            const { supabase } = await import('../supabaseClient');\n            const { username } = response.data;\n            const { uid, wallet } = result.user;\n            const { error } = await supabase\n              .from('users')\n              .upsert([\n                {\n                  pi_user_uid: uid,\n                  username,\n                  wallet_address: wallet,\n                  is_premium: false,\n                }\n              ], { onConflict: ['pi_user_uid'] });\n            if (error) {\n              alert('Supabase save error: ' + error.message);\n            } else {\n              alert('Pi login successful! Username: ' + username);\n            }\n          } else {\n            alert('Login failed: ' + (response.data?.error || 'Unknown error'));\n          }\n        } else {\n          alert('No accessToken or user from Pi Network!');\n        }\n      } catch (err) {\n        alert('Login failed: ' + err);\n      }\n    } else {\n      alert('Pi SDK not loaded!');\n    }\n    setIsOpen(false);\n  };\n\n  // Pi Network login callbacks\n  const onLoginSuccess = async (authResult) => {\n    // Save user info to Supabase\n    const { supabase } = await import('../supabaseClient');\n    const { user } = authResult;\n    if (user) {\n      const { id, username } = user;\n      // Upsert user into Supabase 'users' table\n      const { error } = await supabase\n        .from('users')\n        .upsert([{ id, username }], { onConflict: ['id'] });\n      if (error) {\n        alert('Supabase save error: ' + error.message);\n      } else {\n        alert('Pi Network login successful! User: ' + JSON.stringify(user));\n      }\n    } else {\n      alert('No user info from Pi Network!');\n    }\n  };\n  const onLoginFailure = (error) => {\n    alert('Pi Network login failed: ' + error);\n  };\n\n\n  // Pi Network payment integration (Pi demo flow)\n\n  const handleGoPremium = async () => {\n    if (!window.Pi) {\n      alert('Pi SDK nije učitan!');\n      return;\n    }\n    // Dohvati korisnika iz Supabase (pretpostavljamo da je login već urađen)\n    const { supabase } = await import('../supabaseClient');\n    const { data: userData, error: userError } = await supabase\n      .from('users')\n      .select('*')\n      .eq('is_premium', false)\n      .limit(1);\n    if (userError || !userData || userData.length === 0) {\n      alert('Nema korisnika za premium!');\n      return;\n    }\n    const user = userData[0];\n    const paymentData = {\n      amount: PREMIUM_AMOUNT, // Pi iznos\n      memo: `PurpleMusic Premium ${PREMIUM_AMOUNT} Pi`,\n      metadata: { type: \"premium\", user: user.username, pi_user_uid: user.pi_user_uid },\n    };\n\n    // Callback: kada je payment spreman za server approval\n    const onReadyForServerApproval = async (paymentId) => {\n      try {\n        const apiAxios = (await import('../apiAxios')).default;\n        const response = await apiAxios.post('/api/payments/approve', { paymentId, pi_user_uid: user.pi_user_uid });\n        if (!response.data.success) {\n          console.warn('[APPROVE FAIL]', response.data);\n          // Pokušaj inspect da prikupiš više podataka\n            try {\n              const inspect = await apiAxios.get(`/api/payments/inspect/${paymentId}`);\n              console.warn('[INSPECT]', inspect.data);\n            } catch (ie) {\n              console.warn('[INSPECT ERROR]', ie?.response?.data || ie.message);\n            }\n          alert('Approve greška: ' + (response.data.error || 'Nepoznata greška') + (response.data.code ? (' [' + response.data.code + ']') : ''));\n        } else {\n          console.log('Payment approved na serveru');\n        }\n      } catch (err) {\n        console.error('[APPROVE EXCEPTION]', err);\n        alert('Greška (approve) komunikacija: ' + err.message);\n      }\n    };\n\n    // Callback: kada je payment završen (client dobije txid) => server complete\n    const onReadyForServerCompletion = async (paymentId, txid) => {\n      try {\n        const apiAxios = (await import('../apiAxios')).default;\n        const response = await apiAxios.post('/api/payments/complete', { paymentId, txid, pi_user_uid: user.pi_user_uid });\n        if (response.data.success) {\n          const { error } = await supabase\n            .from('users')\n            .update({ is_premium: true })\n            .eq('pi_user_uid', user.pi_user_uid);\n          if (error) {\n            alert('Premium activ, ali lokalni update pao: ' + error.message);\n          } else {\n            alert('Plaćanje završeno! Premium aktiviran.');\n          }\n        } else {\n          console.warn('[COMPLETE FAIL]', response.data);\n          alert('Complete greška: ' + (response.data.error || 'Nepoznata greška') + (response.data.code ? (' [' + response.data.code + ']') : ''));\n        }\n      } catch (err) {\n        console.error('[COMPLETE EXCEPTION]', err);\n        alert('Greška (complete) komunikacija: ' + err.message);\n      }\n    };\n\n    // Callback: otkazano\n    const onCancel = (paymentId) => {\n      alert('Plaćanje otkazano.');\n    };\n\n    // Callback: greška\n    const onError = (error, payment) => {\n      alert('Greška u plaćanju: ' + error);\n    };\n\n    window.Pi.createPayment(paymentData, {\n      onReadyForServerApproval,\n      onReadyForServerCompletion,\n      onCancel,\n      onError,\n    });\n    setIsOpen(false);\n  };\n\n  const handleViewProfile = () => {\n    navigate('/profile');\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"profile-dropdown\" ref={dropdownRef}>\n      {/* Profile Icon */}\n      <div \n        className=\"profile-icon\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <span>👤</span>\n      </div>\n\n      {/* Dropdown Menu */}\n      {isOpen && (\n        <div className=\"profile-dropdown-menu\">\n          <div className=\"dropdown-arrow\"></div>\n          \n          <div className=\"dropdown-content\">\n            {/* View Profile Button */}\n            <button\n              onClick={handleViewProfile}\n              className=\"dropdown-button view-profile\"\n            >\n              <div className=\"button-icon profile-icon\">👤</div>\n              <div className=\"button-text\">\n                <div className=\"button-title\">View Profile</div>\n                <div className=\"button-subtitle\">Manage your account</div>\n              </div>\n            </button>\n\n            {/* Divider */}\n            <div className=\"dropdown-divider\"></div>\n\n            {/* Pi Network Login Button */}\n            <button\n              onClick={handlePiNetworkLogin}\n              className=\"dropdown-button pi-network\"\n            >\n              <div className=\"button-icon pi-icon\">π</div>\n              <div className=\"button-text\">\n                <div className=\"button-title\">Login with Pi Network</div>\n                <div className=\"button-subtitle\">Connect your Pi account</div>\n              </div>\n            </button>\n\n            {/* Divider */}\n            <div className=\"dropdown-divider\"></div>\n\n            {/* Go Premium Button */}\n            <button\n              onClick={handleGoPremium}\n              className=\"dropdown-button premium\"\n            >\n              <div className=\"button-icon premium-icon\">⭐</div>\n              <div className=\"button-text\">\n                <div className=\"button-title\">Go Premium – {PREMIUM_AMOUNT}π</div>\n                <div className=\"button-subtitle\">Full access for {PREMIUM_AMOUNT} Pi</div>\n              </div>\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9012},"src/screens/LikedSongsScreen.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { getLikedSongs, isUserLoggedIn } from '../services/likeService';\n\nexport default function LikedSongsScreen() {\n  // ...existing code...\n  \n  const [likedSongs, setLikedSongs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n    const loadLikedSongs = async () => {\n      if (!isUserLoggedIn()) {\n        setLikedSongs([]);\n        setLoading(false);\n        return;\n      }\n      \n      try {\n        const songs = await getLikedSongs();\n        setLikedSongs(songs);\n      } catch (error) {\n        console.error('Error loading liked songs:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadLikedSongs();\n  }, []);\n\n  const handlePlaySong = (song, index) => {\n    // Convert liked song back to song format for player\n    const songData = {\n      id: song.song_id,\n      title: song.song_title,\n      artist: song.song_artist,\n      cover: song.song_cover,\n      src: song.song_src\n    };\n    alert('Play: ' + song.song_title + ' - This will integrate with player later');\n  };\n\n  const handlePlayAll = () => {\n    alert('Play all liked songs');\n  };\n\n  return (\n    <div className=\"liked-songs-screen\">\n      <div className=\"liked-header\">\n        <div className=\"liked-cover\">\n          <span className=\"liked-icon\">💚</span>\n        </div>\n        <div className=\"liked-info\">\n          <p className=\"liked-type\">Playlist</p>\n          <h1 className=\"liked-title\">Liked Songs</h1>\n          <p className=\"liked-count\">{likedSongs.length} songs</p>\n        </div>\n      </div>\n\n      <div className=\"liked-controls\">\n        <button className=\"play-all-btn\" onClick={handlePlayAll}>\n          <span>▶</span>\n          Play\n        </button>\n        <button className=\"shuffle-btn\">\n          🔀\n        </button>\n      </div>\n\n      <div className=\"songs-list\">\n        {loading ? (\n          <div className=\"loading-message\">\n            <p>Loading liked songs...</p>\n          </div>\n        ) : !isUserLoggedIn() ? (\n          <div className=\"not-logged-in\">\n            <p>Please log in to see your liked songs</p>\n          </div>\n        ) : likedSongs.length === 0 ? (\n          <div className=\"no-liked-songs\">\n            <p>No liked songs yet. Start liking songs from the player!</p>\n          </div>\n        ) : (\n          likedSongs.map((song, index) => (\n            <div key={song.id} className=\"song-item\" onClick={() => handlePlaySong(song, index)}>\n              <div className=\"song-number\">{index + 1}</div>\n              <div className=\"song-cover\">\n                <img src={song.song_cover} alt={song.song_title} className=\"cover-image\" />\n              </div>\n              <div className=\"song-details\">\n                <h3 className=\"song-title\">{song.song_title}</h3>\n                <p className=\"song-artist\">{song.song_artist}</p>\n              </div>\n              <div className=\"song-date\">\n                {new Date(song.created_at).toLocaleDateString()}\n              </div>\n              <button \n                className=\"song-menu\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                ❤️\n              </button>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":3299},"src/screens/PlaylistsScreen.js":{"content":"import React from 'react';\n// ...existing code...\n\nexport default function PlaylistsScreen() {\n  // ...existing code...\n  \n  const [playlists, setPlaylists] = React.useState([]);\n  const [showPremiumPopup, setShowPremiumPopup] = React.useState(false);\n\n  // Premium check function - for demo purposes, simulate some premium users\n  const isPremium = () => {\n    // For demo: Check if user has set premium in localStorage for testing\n    // In real app, this would check actual subscription/payment status\n    const userId = localStorage.getItem('user_id');\n    return localStorage.getItem('premium_demo') === 'true' || \n           (userId && userId.includes('premium')); // demo premium users\n  };\n  React.useEffect(() => {\n    import('../supabaseClient').then(({ supabase }) => {\n      supabase\n        .from('playlists')\n        .select('*')\n        .then(({ data, error }) => {\n          if (error) {\n            alert('Error loading playlists: ' + error.message);\n          } else {\n            setPlaylists(data || []);\n          }\n        });\n    });\n  }, []);\n\n  const sampleSongs = [\n    { id: 1, title: 'Blinding Lights', artist: 'The Weeknd', cover: '🌟', album: 'After Hours' },\n    { id: 2, title: 'Watermelon Sugar', artist: 'Harry Styles', cover: '🍉', album: 'Fine Line' },\n    { id: 3, title: 'Levitating', artist: 'Dua Lipa', cover: '✨', album: 'Future Nostalgia' },\n  ];\n\n  const handlePlayPlaylist = (playlist) => {\n    alert('Play: ' + (playlist.name || playlist));\n  };\n\n  const handleCreatePlaylist = () => {\n    if (!isPremium()) {\n      setShowPremiumPopup(true);\n      return;\n    }\n    // Premium functionality: actual playlist creation\n    alert('Create playlist functionality for premium users!');\n  };\n\n  const closePremiumPopup = () => {\n    setShowPremiumPopup(false);\n  };\n\n  return (\n    <div className=\"playlists-screen\">\n      <div className=\"playlists-header\">\n        <h1 className=\"screen-title\">My Playlists</h1>\n        <button className=\"create-playlist-btn\" onClick={handleCreatePlaylist} title=\"Premium Feature - Create Custom Playlists\">\n          <span>+</span>\n          Create Playlist\n        </button>\n      </div>\n\n\n      <div className=\"playlists-list\">\n        <h2 className=\"section-title\">Made by you</h2>\n        {playlists.map((playlist) => (\n          <div key={playlist.id} className=\"playlist-item\" onClick={() => handlePlayPlaylist(playlist)}>\n            <div className=\"playlist-cover\">\n              <span>{playlist.cover}</span>\n            </div>\n            <div className=\"playlist-details\">\n              <h3 className=\"playlist-name\">{playlist.name}</h3>\n              <p className=\"playlist-info\">{playlist.songCount} songs • {playlist.lastUpdated}</p>\n            </div>\n            <button \n              className=\"playlist-menu\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              ⋯\n            </button>\n          </div>\n        ))}\n      </div>\n\n      {/* Premium Popup */}\n      {showPremiumPopup && (\n        <div className=\"premium-popup-overlay\" onClick={closePremiumPopup}>\n          <div className=\"premium-popup\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"premium-header\">\n              <h2>🎵 Premium Feature</h2>\n              <button className=\"close-btn\" onClick={closePremiumPopup}>×</button>\n            </div>\n            <div className=\"premium-content\">\n              <div className=\"premium-icon\">⭐</div>\n              <h3>Create Custom Playlists</h3>\n              <p>Creating custom playlists is a premium feature that lets you organize your favorite music exactly how you want.</p>\n              \n              <div className=\"premium-price\">\n                <span className=\"price\">3.14π</span>\n                <span className=\"period\">Premium Membership</span>\n              </div>\n              \n              <div className=\"premium-features\">\n                <div className=\"feature\">✓ Create unlimited playlists</div>\n                <div className=\"feature\">✓ Custom playlist covers</div>\n                <div className=\"feature\">✓ Advanced playlist management</div>\n                <div className=\"feature\">✓ Offline playlist download</div>\n              </div>\n              \n              <div className=\"premium-buttons\">\n                <button className=\"upgrade-btn\">Upgrade to Premium</button>\n                <button className=\"cancel-btn\" onClick={closePremiumPopup}>Maybe Later</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4573},"src/screens/SearchScreen.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { loadMusicLibrary } from '../services/libraryLoader';\nimport ModernAudioPlayer from '../components/ModernAudioPlayer';\n\nexport default function SearchScreen() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [songs, setSongs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedSong, setSelectedSong] = useState(null);\n  const [playerOpen, setPlayerOpen] = useState(false);\n\n  useEffect(() => {\n    const loadSongs = async () => {\n      try {\n        setLoading(true);\n        const songList = await loadMusicLibrary();\n        setSongs(songList);\n      } catch (error) {\n        console.error('Error loading songs:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadSongs();\n  }, []);\n\n  // Filter songs based on search query (show results after 2+ characters)\n  const filteredSongs = searchQuery.length >= 2 \n    ? songs.filter(song => \n        song.title.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    : [];\n\n  const handlePlaySong = (song) => {\n    setSelectedSong(song);\n    setPlayerOpen(true);\n  };\n\n  const handleClosePlayer = () => {\n    setPlayerOpen(false);\n    setSelectedSong(null);\n  };\n\n  const recentSearches = [\n    'Rock',\n    'Pop',\n    'Jazz',\n    'Electronic',\n    'Classical'\n  ];\n\n  const trendingSearches = songs.slice(0, 5).map(song => song.title);\n\n  return (\n    <div className=\"search-screen\">\n      <div className=\"search-input-container\">\n        <input\n          type=\"text\"\n          className=\"search-input\"\n          placeholder=\"Artists, songs, or podcasts\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n        />\n        <span className=\"search-icon\">🔍</span>\n      </div>\n\n      {!searchQuery && (\n        <>\n          <section className=\"search-section\">\n            <h2 className=\"section-title\">Recent searches</h2>\n            <div className=\"search-list\">\n              {recentSearches.map((search, index) => (\n                <div key={index} className=\"search-item\">\n                  <span className=\"search-text\">{search}</span>\n                  <span className=\"search-close\">✕</span>\n                </div>\n              ))}\n            </div>\n          </section>\n\n          <section className=\"search-section\">\n            <h2 className=\"section-title\">Trending searches</h2>\n            <div className=\"search-list\">\n              {trendingSearches.map((search, index) => (\n                <div key={index} className=\"search-item\">\n                  <span className=\"trending-icon\">📈</span>\n                  <span className=\"search-text\">{search}</span>\n                </div>\n              ))}\n            </div>\n          </section>\n        </>\n      )}\n\n      {searchQuery.length >= 2 && (\n        <div className=\"search-results\">\n          <p className=\"search-results-text\">Search results for \"{searchQuery}\"</p>\n          {loading ? (\n            <div style={{color:'#888', fontSize:12, marginTop:20}}>Loading songs...</div>\n          ) : filteredSongs.length > 0 ? (\n            <div className=\"songs-grid\" style={{marginTop: 20}}>\n              {filteredSongs.map((song, idx) => (\n                <div key={idx} className=\"song-card\" onClick={() => handlePlaySong(song)} role=\"button\" tabIndex={0} onKeyDown={(e) => { if (e.key === 'Enter') handlePlaySong(song); }}>\n                  <div className=\"song-card-cover\">\n                    <img src={song.cover || '/fallback-cover.png'} alt={song.title} loading=\"lazy\" />\n                  </div>\n                  <div className=\"song-card-title\" title={song.title}>{song.title}</div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"no-results\">\n              <span className=\"no-results-icon\">🔍</span>\n              <p>No results found</p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {playerOpen && selectedSong && (\n        <div style={{ position: 'fixed', left: 0, right: 0, bottom: 80, zIndex: 1000 }}>\n          <div style={{ position: 'absolute', top: 8, right: 8, zIndex: 1100 }}>\n            <button\n              style={{ background: 'rgba(0,0,0,0.7)', color: '#fff', border: 'none', borderRadius: '50%', width: 32, height: 32, fontSize: 20, cursor: 'pointer' }}\n              onClick={handleClosePlayer}\n              aria-label=\"Close player\"\n            >\n              ×\n            </button>\n          </div>\n          <ModernAudioPlayer key={selectedSong.title} autoPlay song={{\n            ...selectedSong,\n            src: selectedSong.url\n          }} />\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4702},"src/services/api.js":{"content":"const API_URL = process.env.REACT_APP_API_URL || 'https://purplemusicapp.onrender.com';\n\nexport async function getSongs() {\n  const res = await fetch(`${API_URL}/songs`);\n  if (!res.ok) throw new Error('Greška pri učitavanju pesama');\n  return res.json();\n}\n\nexport async function addSong(song) {\n  const res = await fetch(`${API_URL}/songs`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(song)\n  });\n  if (!res.ok) throw new Error('Greška pri dodavanju pesme');\n  return res.json();\n}\n\nexport async function deleteSong(id) {\n  const res = await fetch(`${API_URL}/songs/${id}`, {\n    method: 'DELETE'\n  });\n  if (!res.ok) throw new Error('Greška pri brisanju pesme');\n  return res.json();\n}\n","size_bytes":749},"src/services/libraryLoader.js":{"content":"import { supabase } from '../supabaseClient';\n\nconst MUSIC_BUCKET = 'Music';\nconst COVERS_BUCKET = 'Covers';\nconst PUBLIC_BASE = (path) => `https://ofkfygqrfenctzitigae.supabase.co/storage/v1/object/public/${path}`;\n\nfunction stripExt(name){\n  return name.replace(/\\.[^.]+$/,'');\n}\n\nexport async function loadMusicLibrary() {\n  console.log('🎵 Loading music library from Supabase...');\n  \n  // Direct list of known files (exactly from user's screenshots)\n  const knownSongs = [\n    'deepabstractambient',\n    'retro-lounge', \n    'running-night',\n    'vlog-beat-background',\n    'apocalypse-1-original-lyrics',\n    '8039s-nostalgia',\n    'retro-80s-sax',\n    '80s-baby-original-lyrics',\n    'apocalypse-original-lyrics',\n    'lady-of-the-80',\n    '80-cinematic-synthwave'\n  ];\n\n  // Format song titles nicely\n  const formatTitle = (filename) => {\n    return filename\n      .replace(/[-_]/g, ' ')\n      .replace(/\\b\\w/g, l => l.toUpperCase())\n      .replace(/80s/gi, '80s')\n      .replace(/1 /g, '1: ');\n  };\n\n  // Create songs array using known files\n  const songs = knownSongs.map(baseName => {\n    const musicUrl = PUBLIC_BASE(`${MUSIC_BUCKET}/${baseName}.mp3`);\n    const coverUrl = PUBLIC_BASE(`${COVERS_BUCKET}/${baseName}.png`);\n    \n    return {\n      id: baseName,\n      title: formatTitle(baseName),\n      url: musicUrl,\n      cover: coverUrl\n    };\n  });\n\n  console.log('🎵 Created songs count:', songs.length);\n  console.log('🎵 Sample song URLs (FIXED):', {\n    first: songs[0]?.url,\n    cover: songs[0]?.cover\n  });\n  return songs;\n}\n","size_bytes":1553},"src/services/musicLibrary.js":{"content":"import { supabase } from '../supabaseClient';\n\n// Egyszerű (nem rekurzív) listázás a bucket gyökerében – jelen igényhez elég.\nasync function listAllFiles(bucket, { extensions = null, limit = 1000 } = {}) {\n  const { data, error } = await supabase.storage.from(bucket).list('', {\n    limit,\n    sortBy: { column: 'name', order: 'asc' }\n  });\n  if (error) throw new Error(`Greška pri listanju bucket-a ${bucket}: ${error.message}`);\n  if (!data) return [];\n  return data\n    .filter(e => e && e.name)\n    .map(e => e.name)\n    .filter(name => {\n      if (!extensions) return true;\n      const ext = name.split('.').pop().toLowerCase();\n      return extensions.includes(ext);\n    });\n}\n\nfunction baseName(filename) {\n  return filename.replace(/\\.[^/.]+$/, '');\n}\n\nfunction formatTitle(raw) {\n  if (/^[A-F0-9]{8,}$/i.test(raw)) return raw; // leave hash-looking IDs\n  return raw\n    .replace(/[_-]+/g, ' ')\n    .trim()\n    .replace(/\\s+/g, ' ')\n    .split(' ')\n    .map(w => w.charAt(0).toUpperCase() + w.slice(1))\n    .join(' ');\n}\n\nexport async function fetchMusicLibrary({ includeUnmatched = true, fallbackCover = '/fallback-cover.png', debug = false } = {}) {\n  const [musicFiles, coverFiles] = await Promise.all([\n    listAllFiles('Music', { extensions: ['mp3'] }),\n    listAllFiles('Covers', { extensions: ['png', 'jpg', 'jpeg'] })\n  ]);\n\n  if (debug && typeof window !== 'undefined') {\n    console.log('[MusicLibrary] Fetched raw lists', { musicFiles, coverFiles });\n  }\n\n  const musicMap = new Map(musicFiles.map(f => [baseName(f), f]));\n  const coverMap = new Map(coverFiles.map(c => [baseName(c), c]));\n\n  const songs = [];\n  // Minden mp3-ból készítünk rekordot – cover optional\n  for (const [id, musicFile] of musicMap.entries()) {\n    const coverFile = coverMap.get(id);\n    const { data: { publicUrl: musicUrl } } = supabase.storage.from('Music').getPublicUrl(musicFile);\n    let coverUrl = fallbackCover;\n    if (coverFile) {\n      coverUrl = supabase.storage.from('Covers').getPublicUrl(coverFile).data.publicUrl;\n    }\n    songs.push({ title: formatTitle(id), url: musicUrl, cover: coverUrl });\n  }\n\n  songs.sort((a, b) => a.title.localeCompare(b.title));\n  if (debug && typeof window !== 'undefined') console.log('[MusicLibrary] Final songs list', songs);\n  return songs;\n}\n\nlet _cache = null;\nlet _cacheTime = 0;\nconst CACHE_TTL_MS = 60_000; // 1 minute\n\nexport async function fetchMusicLibraryCached(force = false, options = {}) {\n  const now = Date.now();\n  if (!force && _cache && now - _cacheTime < CACHE_TTL_MS) return _cache;\n  _cache = await fetchMusicLibrary(options);\n  _cacheTime = now;\n  return _cache;\n}\n","size_bytes":2648},"src/services/likeService.js":{"content":"import { supabase } from '../supabaseClient';\n\n// Get current user ID (simple mock for now - can be enhanced with real auth)\nconst getCurrentUserId = () => {\n  // For now, use a simple user ID. This can be enhanced with real authentication\n  return localStorage.getItem('user_id') || 'demo_user';\n};\n\n// Check if song is liked by current user\nexport const checkSongLiked = async (songId) => {\n  try {\n    if (!songId) return false;\n    \n    const userId = getCurrentUserId();\n    if (!userId) return false;\n    \n    const { data, error } = await supabase\n      .from('liked_songs')\n      .select('id')\n      .eq('user_id', userId)\n      .eq('song_id', songId)\n      .maybeSingle();\n    \n    if (error) {\n      console.error('Error checking if song is liked:', error);\n      return false;\n    }\n    \n    return !!data;\n  } catch (error) {\n    console.error('Error checking if song is liked:', error);\n    return false;\n  }\n};\n\n// Like a song\nexport const likeSong = async (song) => {\n  try {\n    if (!song.id) {\n      console.error('Cannot like song: missing song ID');\n      return false;\n    }\n    \n    const userId = getCurrentUserId();\n    if (!userId) {\n      console.error('Cannot like song: user not logged in');\n      return false;\n    }\n    \n    const { data, error } = await supabase\n      .from('liked_songs')\n      .upsert({\n        user_id: userId,\n        song_id: song.id,\n        song_title: song.title,\n        song_artist: song.artist,\n        song_cover: song.cover,\n        song_src: song.src\n      }, {\n        onConflict: 'user_id,song_id'\n      });\n    \n    if (error) {\n      console.error('Error liking song:', error);\n      return false;\n    }\n    \n    console.log('Song liked successfully:', song.title);\n    return true;\n  } catch (error) {\n    console.error('Error liking song:', error);\n    return false;\n  }\n};\n\n// Unlike a song\nexport const unlikeSong = async (songId) => {\n  try {\n    const userId = getCurrentUserId();\n    \n    const { error } = await supabase\n      .from('liked_songs')\n      .delete()\n      .eq('user_id', userId)\n      .eq('song_id', songId);\n    \n    if (error) {\n      console.error('Error unliking song:', error);\n      return false;\n    }\n    \n    console.log('Song unliked successfully');\n    return true;\n  } catch (error) {\n    console.error('Error unliking song:', error);\n    return false;\n  }\n};\n\n// Get all liked songs for current user\nexport const getLikedSongs = async () => {\n  try {\n    const userId = getCurrentUserId();\n    \n    const { data, error } = await supabase\n      .from('liked_songs')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error getting liked songs:', error);\n      return [];\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error getting liked songs:', error);\n    return [];\n  }\n};\n\n// Set user ID (for simple authentication)\nexport const setUserId = (userId) => {\n  localStorage.setItem('user_id', userId);\n};\n\n// Check if user is logged in (for real authentication)\nexport const isUserLoggedIn = () => {\n  const userId = getCurrentUserId();\n  // For now, consider demo users as \"not logged in\" for proper auth flow\n  // This can be updated when real authentication is implemented\n  return userId && !userId.startsWith('demo_user');\n};","size_bytes":3346},"src/screens/ViewProfileScreen.js":{"content":"import React, { useState, useRef } from 'react';\n\nexport default function ViewProfileScreen() {\n  const [profilePicture, setProfilePicture] = useState(null);\n  const [username, setUsername] = useState('Music Lover');\n  const [email, setEmail] = useState('user@example.com');\n  const [isEditing, setIsEditing] = useState(false);\n  const fileInputRef = useRef(null);\n\n  const handleProfilePictureChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setProfilePicture(event.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const triggerFileInput = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleSaveProfile = () => {\n    setIsEditing(false);\n    // Here you would save to backend/Supabase\n    alert('Profile updated successfully!');\n  };\n\n  return (\n    <div className=\"view-profile-screen\">\n      <div className=\"profile-header\">\n        <h1 className=\"screen-title\">Profile</h1>\n        <button \n          className=\"edit-profile-btn\"\n          onClick={() => setIsEditing(!isEditing)}\n        >\n          {isEditing ? 'Cancel' : 'Edit Profile'}\n        </button>\n      </div>\n\n      <div className=\"profile-content\">\n        {/* Profile Picture Section */}\n        <div className=\"profile-picture-section\">\n          <div className=\"profile-picture-container\" onClick={isEditing ? triggerFileInput : undefined}>\n            {profilePicture ? (\n              <img \n                src={profilePicture} \n                alt=\"Profile\" \n                className=\"profile-picture\"\n              />\n            ) : (\n              <div className=\"profile-picture-placeholder\">\n                <span className=\"profile-icon-large\">👤</span>\n              </div>\n            )}\n            {isEditing && (\n              <div className=\"profile-picture-overlay\">\n                <span className=\"camera-icon\">📷</span>\n                <span className=\"upload-text\">Change Photo</span>\n              </div>\n            )}\n          </div>\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            onChange={handleProfilePictureChange}\n            accept=\"image/*\"\n            style={{ display: 'none' }}\n          />\n        </div>\n\n        {/* Profile Information */}\n        <div className=\"profile-info-section\">\n          <div className=\"profile-field\">\n            <label className=\"field-label\">Username</label>\n            {isEditing ? (\n              <input \n                type=\"text\" \n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"field-input\"\n                placeholder=\"Enter username\"\n              />\n            ) : (\n              <div className=\"field-value\">{username}</div>\n            )}\n          </div>\n\n          <div className=\"profile-field\">\n            <label className=\"field-label\">Email</label>\n            {isEditing ? (\n              <input \n                type=\"email\" \n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"field-input\"\n                placeholder=\"Enter email\"\n              />\n            ) : (\n              <div className=\"field-value\">{email}</div>\n            )}\n          </div>\n\n          <div className=\"profile-field\">\n            <label className=\"field-label\">Member Since</label>\n            <div className=\"field-value\">September 2024</div>\n          </div>\n\n          <div className=\"profile-field\">\n            <label className=\"field-label\">Premium Status</label>\n            <div className=\"field-value premium-status\">\n              <span className=\"status-badge free\">Free Plan</span>\n              <button className=\"upgrade-badge\">Upgrade to Premium</button>\n            </div>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        {isEditing && (\n          <div className=\"profile-actions\">\n            <button className=\"save-profile-btn\" onClick={handleSaveProfile}>\n              Save Changes\n            </button>\n          </div>\n        )}\n\n        {/* Stats Section */}\n        <div className=\"profile-stats\">\n          <h3 className=\"stats-title\">Your Music Stats</h3>\n          <div className=\"stats-grid\">\n            <div className=\"stat-item\">\n              <div className=\"stat-number\">42</div>\n              <div className=\"stat-label\">Liked Songs</div>\n            </div>\n            <div className=\"stat-item\">\n              <div className=\"stat-number\">12</div>\n              <div className=\"stat-label\">Playlists</div>\n            </div>\n            <div className=\"stat-item\">\n              <div className=\"stat-number\">156</div>\n              <div className=\"stat-label\">Hours Listened</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4882}},"version":1}